
led_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013e4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000334  08001584  08001584  00011584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080018b8  080018b8  00020058  2**0
                  CONTENTS
  4 .ARM          00000000  080018b8  080018b8  00020058  2**0
                  CONTENTS
  5 .preinit_array 00000000  080018b8  080018b8  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080018b8  080018b8  000118b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080018bc  080018bc  000118bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  080018c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  20000058  08001918  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  08001918  00020288  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000157b  00000000  00000000  000200cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000733  00000000  00000000  00021646  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001c8  00000000  00000000  00021d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000013a  00000000  00000000  00021f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001480  00000000  00000000  00022082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002537  00000000  00000000  00023502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000540e6  00000000  00000000  00025a39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000ac0  00000000  00000000  00079b20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000042  00000000  00000000  0007a5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000058 	.word	0x20000058
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800156c 	.word	0x0800156c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000005c 	.word	0x2000005c
 80001dc:	0800156c 	.word	0x0800156c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <bootloader_uart_read_data>:
                               BL_READ_SECTOR_P_STATUS} ;



void  bootloader_uart_read_data(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b09c      	sub	sp, #112	; 0x70
 8000284:	af00      	add	r7, sp, #0
    uint8_t rcv_len=0;
 8000286:	2300      	movs	r3, #0
 8000288:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

	while(1)
	{
		memset(bl_rx_buffer,0,200);
 800028c:	22c8      	movs	r2, #200	; 0xc8
 800028e:	2100      	movs	r1, #0
 8000290:	4846      	ldr	r0, [pc, #280]	; (80003ac <bootloader_uart_read_data+0x12c>)
 8000292:	f000 fce7 	bl	8000c64 <memset>
		//here we will read and decode the commands coming from host
		//first read only one byte from the host , which is the "length" field of the command packet
		usart_receive_bytes(bl_rx_buffer,2);
 8000296:	2102      	movs	r1, #2
 8000298:	4844      	ldr	r0, [pc, #272]	; (80003ac <bootloader_uart_read_data+0x12c>)
 800029a:	f000 fc7d 	bl	8000b98 <usart_receive_bytes>
		rcv_len= bl_rx_buffer[0]-'0';
 800029e:	4b43      	ldr	r3, [pc, #268]	; (80003ac <bootloader_uart_read_data+0x12c>)
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	3b30      	subs	r3, #48	; 0x30
 80002a4:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
		usart_receive_bytes(&bl_rx_buffer[2],rcv_len+1);
 80002a8:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80002ac:	3301      	adds	r3, #1
 80002ae:	b2db      	uxtb	r3, r3
 80002b0:	4619      	mov	r1, r3
 80002b2:	483f      	ldr	r0, [pc, #252]	; (80003b0 <bootloader_uart_read_data+0x130>)
 80002b4:	f000 fc70 	bl	8000b98 <usart_receive_bytes>
		uint8_t payLoad[100];
		memset(payLoad,0,100);
 80002b8:	1d3b      	adds	r3, r7, #4
 80002ba:	2264      	movs	r2, #100	; 0x64
 80002bc:	2100      	movs	r1, #0
 80002be:	4618      	mov	r0, r3
 80002c0:	f000 fcd0 	bl	8000c64 <memset>
		sprintf(payLoad,"BL_DEBUG_MSG:command code received from host:%d %d \r\n" , bl_rx_buffer[0], bl_rx_buffer[2]);
 80002c4:	4b39      	ldr	r3, [pc, #228]	; (80003ac <bootloader_uart_read_data+0x12c>)
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	461a      	mov	r2, r3
 80002ca:	4b38      	ldr	r3, [pc, #224]	; (80003ac <bootloader_uart_read_data+0x12c>)
 80002cc:	789b      	ldrb	r3, [r3, #2]
 80002ce:	1d38      	adds	r0, r7, #4
 80002d0:	4938      	ldr	r1, [pc, #224]	; (80003b4 <bootloader_uart_read_data+0x134>)
 80002d2:	f000 fca7 	bl	8000c24 <siprintf>
	    usart_send_bytes(payLoad,sizeof(payLoad));
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	2164      	movs	r1, #100	; 0x64
 80002da:	4618      	mov	r0, r3
 80002dc:	f000 fc26 	bl	8000b2c <usart_send_bytes>
		switch(bl_rx_buffer[2])
 80002e0:	4b32      	ldr	r3, [pc, #200]	; (80003ac <bootloader_uart_read_data+0x12c>)
 80002e2:	789b      	ldrb	r3, [r3, #2]
 80002e4:	3b51      	subs	r3, #81	; 0x51
 80002e6:	2b0b      	cmp	r3, #11
 80002e8:	d84a      	bhi.n	8000380 <bootloader_uart_read_data+0x100>
 80002ea:	a201      	add	r2, pc, #4	; (adr r2, 80002f0 <bootloader_uart_read_data+0x70>)
 80002ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002f0:	08000321 	.word	0x08000321
 80002f4:	08000329 	.word	0x08000329
 80002f8:	08000331 	.word	0x08000331
 80002fc:	08000339 	.word	0x08000339
 8000300:	08000341 	.word	0x08000341
 8000304:	08000349 	.word	0x08000349
 8000308:	08000351 	.word	0x08000351
 800030c:	08000359 	.word	0x08000359
 8000310:	08000361 	.word	0x08000361
 8000314:	08000369 	.word	0x08000369
 8000318:	08000371 	.word	0x08000371
 800031c:	08000379 	.word	0x08000379
		{
            case BL_GET_VER:
                bootloader_handle_getver_cmd(bl_rx_buffer);
 8000320:	4822      	ldr	r0, [pc, #136]	; (80003ac <bootloader_uart_read_data+0x12c>)
 8000322:	f000 f88f 	bl	8000444 <bootloader_handle_getver_cmd>
                break;
 8000326:	e036      	b.n	8000396 <bootloader_uart_read_data+0x116>
            case BL_GET_HELP:
                bootloader_handle_gethelp_cmd(bl_rx_buffer);
 8000328:	4820      	ldr	r0, [pc, #128]	; (80003ac <bootloader_uart_read_data+0x12c>)
 800032a:	f000 f8f5 	bl	8000518 <bootloader_handle_gethelp_cmd>
                break;
 800032e:	e032      	b.n	8000396 <bootloader_uart_read_data+0x116>
            case BL_GET_CID:
                bootloader_handle_getcid_cmd(bl_rx_buffer);
 8000330:	481e      	ldr	r0, [pc, #120]	; (80003ac <bootloader_uart_read_data+0x12c>)
 8000332:	f000 f919 	bl	8000568 <bootloader_handle_getcid_cmd>
                break;
 8000336:	e02e      	b.n	8000396 <bootloader_uart_read_data+0x116>
            case BL_GET_RDP_STATUS:
                bootloader_handle_getrdp_cmd(bl_rx_buffer);
 8000338:	481c      	ldr	r0, [pc, #112]	; (80003ac <bootloader_uart_read_data+0x12c>)
 800033a:	f000 f957 	bl	80005ec <bootloader_handle_getrdp_cmd>
                break;
 800033e:	e02a      	b.n	8000396 <bootloader_uart_read_data+0x116>
            case BL_GO_TO_ADDR:
                bootloader_handle_go_cmd(bl_rx_buffer);
 8000340:	481a      	ldr	r0, [pc, #104]	; (80003ac <bootloader_uart_read_data+0x12c>)
 8000342:	f000 f995 	bl	8000670 <bootloader_handle_go_cmd>
                break;
 8000346:	e026      	b.n	8000396 <bootloader_uart_read_data+0x116>
            case BL_FLASH_ERASE:
                bootloader_handle_flash_erase_cmd(bl_rx_buffer);
 8000348:	4818      	ldr	r0, [pc, #96]	; (80003ac <bootloader_uart_read_data+0x12c>)
 800034a:	f000 fa05 	bl	8000758 <bootloader_handle_flash_erase_cmd>
                break;
 800034e:	e022      	b.n	8000396 <bootloader_uart_read_data+0x116>
            case BL_MEM_WRITE:
                bootloader_handle_mem_write_cmd(bl_rx_buffer);
 8000350:	4816      	ldr	r0, [pc, #88]	; (80003ac <bootloader_uart_read_data+0x12c>)
 8000352:	f000 fa0b 	bl	800076c <bootloader_handle_mem_write_cmd>
                break;
 8000356:	e01e      	b.n	8000396 <bootloader_uart_read_data+0x116>
            case BL_EN_RW_PROTECT:
                bootloader_handle_en_rw_protect(bl_rx_buffer);
 8000358:	4814      	ldr	r0, [pc, #80]	; (80003ac <bootloader_uart_read_data+0x12c>)
 800035a:	f000 fa11 	bl	8000780 <bootloader_handle_en_rw_protect>
                break;
 800035e:	e01a      	b.n	8000396 <bootloader_uart_read_data+0x116>
            case BL_MEM_READ:
                bootloader_handle_mem_read(bl_rx_buffer);
 8000360:	4812      	ldr	r0, [pc, #72]	; (80003ac <bootloader_uart_read_data+0x12c>)
 8000362:	f000 fa21 	bl	80007a8 <bootloader_handle_mem_read>
                break;
 8000366:	e016      	b.n	8000396 <bootloader_uart_read_data+0x116>
            case BL_READ_SECTOR_P_STATUS:
                bootloader_handle_read_sector_protection_status(bl_rx_buffer);
 8000368:	4810      	ldr	r0, [pc, #64]	; (80003ac <bootloader_uart_read_data+0x12c>)
 800036a:	f000 fa27 	bl	80007bc <bootloader_handle_read_sector_protection_status>
                break;
 800036e:	e012      	b.n	8000396 <bootloader_uart_read_data+0x116>
            case BL_OTP_READ:
                bootloader_handle_read_otp(bl_rx_buffer);
 8000370:	480e      	ldr	r0, [pc, #56]	; (80003ac <bootloader_uart_read_data+0x12c>)
 8000372:	f000 fa2d 	bl	80007d0 <bootloader_handle_read_otp>
                break;
 8000376:	e00e      	b.n	8000396 <bootloader_uart_read_data+0x116>
						case BL_DIS_R_W_PROTECT:
                bootloader_handle_dis_rw_protect(bl_rx_buffer);
 8000378:	480c      	ldr	r0, [pc, #48]	; (80003ac <bootloader_uart_read_data+0x12c>)
 800037a:	f000 fa0b 	bl	8000794 <bootloader_handle_dis_rw_protect>
                break;
 800037e:	e00a      	b.n	8000396 <bootloader_uart_read_data+0x116>
             default:
            	sprintf(payLoad,"BL_DEBUG_MSG:Invalid command code received from host \r\n");
 8000380:	1d3b      	adds	r3, r7, #4
 8000382:	490d      	ldr	r1, [pc, #52]	; (80003b8 <bootloader_uart_read_data+0x138>)
 8000384:	4618      	mov	r0, r3
 8000386:	f000 fc4d 	bl	8000c24 <siprintf>
                usart_send_bytes(payLoad,sizeof(payLoad));
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	2164      	movs	r1, #100	; 0x64
 800038e:	4618      	mov	r0, r3
 8000390:	f000 fbcc 	bl	8000b2c <usart_send_bytes>
                break;
 8000394:	bf00      	nop


		}
		for(int i=0;i<900000;i++){}
 8000396:	2300      	movs	r3, #0
 8000398:	66fb      	str	r3, [r7, #108]	; 0x6c
 800039a:	e002      	b.n	80003a2 <bootloader_uart_read_data+0x122>
 800039c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800039e:	3301      	adds	r3, #1
 80003a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80003a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80003a4:	4a05      	ldr	r2, [pc, #20]	; (80003bc <bootloader_uart_read_data+0x13c>)
 80003a6:	4293      	cmp	r3, r2
 80003a8:	ddf8      	ble.n	800039c <bootloader_uart_read_data+0x11c>
	{
 80003aa:	e76f      	b.n	800028c <bootloader_uart_read_data+0xc>
 80003ac:	20000074 	.word	0x20000074
 80003b0:	20000076 	.word	0x20000076
 80003b4:	08001584 	.word	0x08001584
 80003b8:	080015bc 	.word	0x080015bc
 80003bc:	000dbb9f 	.word	0x000dbb9f

080003c0 <bootloader_jump_to_user_app>:
	}

}

void bootloader_jump_to_user_app(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b09e      	sub	sp, #120	; 0x78
 80003c4:	af00      	add	r7, sp, #0

   //just a function pointer to hold the address of the reset handler of the user app.
    void (*app_reset_handler)(void);
    uint8_t payLoad[100];
    sprintf(payLoad ,"BL_DEBUG_MSG:bootloader_jump_to_user_app\n");
 80003c6:	1d3b      	adds	r3, r7, #4
 80003c8:	4919      	ldr	r1, [pc, #100]	; (8000430 <bootloader_jump_to_user_app+0x70>)
 80003ca:	4618      	mov	r0, r3
 80003cc:	f000 fc2a 	bl	8000c24 <siprintf>
    usart_send_bytes(payLoad,sizeof(payLoad));
 80003d0:	1d3b      	adds	r3, r7, #4
 80003d2:	2164      	movs	r1, #100	; 0x64
 80003d4:	4618      	mov	r0, r3
 80003d6:	f000 fba9 	bl	8000b2c <usart_send_bytes>

    // 1. configure the MSP by reading the value from the base address of the sector 2
    uint32_t msp_value = *(volatile uint32_t *)FLASH_SECTOR2_BASE_ADDRESS;
 80003da:	4b16      	ldr	r3, [pc, #88]	; (8000434 <bootloader_jump_to_user_app+0x74>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	677b      	str	r3, [r7, #116]	; 0x74
    sprintf(payLoad,"BL_DEBUG_MSG:MSP value : %#x\n",msp_value);
 80003e0:	1d3b      	adds	r3, r7, #4
 80003e2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80003e4:	4914      	ldr	r1, [pc, #80]	; (8000438 <bootloader_jump_to_user_app+0x78>)
 80003e6:	4618      	mov	r0, r3
 80003e8:	f000 fc1c 	bl	8000c24 <siprintf>
    usart_send_bytes(payLoad,sizeof(payLoad));
 80003ec:	1d3b      	adds	r3, r7, #4
 80003ee:	2164      	movs	r1, #100	; 0x64
 80003f0:	4618      	mov	r0, r3
 80003f2:	f000 fb9b 	bl	8000b2c <usart_send_bytes>
 80003f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80003f8:	66bb      	str	r3, [r7, #104]	; 0x68
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80003fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80003fc:	f383 8808 	msr	MSP, r3
}
 8000400:	bf00      	nop
    //SCB->VTOR = FLASH_SECTOR1_BASE_ADDRESS;

    /* 2. Now fetch the reset handler address of the user application
     * from the location FLASH_SECTOR2_BASE_ADDRESS+4
     */
    uint32_t resethandler_address = *(volatile uint32_t *) (FLASH_SECTOR2_BASE_ADDRESS + 4);
 8000402:	4b0e      	ldr	r3, [pc, #56]	; (800043c <bootloader_jump_to_user_app+0x7c>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	673b      	str	r3, [r7, #112]	; 0x70

    app_reset_handler = (void*) resethandler_address;
 8000408:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800040a:	66fb      	str	r3, [r7, #108]	; 0x6c

    sprintf(payLoad,"BL_DEBUG_MSG: app reset handler addr : %#x\n",app_reset_handler);
 800040c:	1d3b      	adds	r3, r7, #4
 800040e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000410:	490b      	ldr	r1, [pc, #44]	; (8000440 <bootloader_jump_to_user_app+0x80>)
 8000412:	4618      	mov	r0, r3
 8000414:	f000 fc06 	bl	8000c24 <siprintf>
    usart_send_bytes(payLoad,sizeof(payLoad));
 8000418:	1d3b      	adds	r3, r7, #4
 800041a:	2164      	movs	r1, #100	; 0x64
 800041c:	4618      	mov	r0, r3
 800041e:	f000 fb85 	bl	8000b2c <usart_send_bytes>

    //3. jump to reset handler of the user application
    app_reset_handler();
 8000422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000424:	4798      	blx	r3

}
 8000426:	bf00      	nop
 8000428:	3778      	adds	r7, #120	; 0x78
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	080015f4 	.word	0x080015f4
 8000434:	08008000 	.word	0x08008000
 8000438:	08001620 	.word	0x08001620
 800043c:	08008004 	.word	0x08008004
 8000440:	08001640 	.word	0x08001640

08000444 <bootloader_handle_getver_cmd>:

/*Helper function to handle BL_GET_VER command */
void bootloader_handle_getver_cmd(uint8_t *bl_rx_buffer)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b09e      	sub	sp, #120	; 0x78
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
    uint8_t bl_version;

    // 1) verify the checksum
    uint8_t payLoad[100];
    memset(payLoad,0,100);
 800044c:	f107 030c 	add.w	r3, r7, #12
 8000450:	2264      	movs	r2, #100	; 0x64
 8000452:	2100      	movs	r1, #0
 8000454:	4618      	mov	r0, r3
 8000456:	f000 fc05 	bl	8000c64 <memset>
      sprintf(payLoad,"BL_DEBUG_MSG:bootloader_handle_getver_cmd\r\n");
 800045a:	f107 030c 	add.w	r3, r7, #12
 800045e:	4919      	ldr	r1, [pc, #100]	; (80004c4 <bootloader_handle_getver_cmd+0x80>)
 8000460:	4618      	mov	r0, r3
 8000462:	f000 fbdf 	bl	8000c24 <siprintf>
      usart_send_bytes(payLoad,sizeof(payLoad));
 8000466:	f107 030c 	add.w	r3, r7, #12
 800046a:	2164      	movs	r1, #100	; 0x64
 800046c:	4618      	mov	r0, r3
 800046e:	f000 fb5d 	bl	8000b2c <usart_send_bytes>
	 //Total length of the command packet
	  uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	3301      	adds	r3, #1
 8000478:	677b      	str	r3, [r7, #116]	; 0x74
    {
    	sprintf(payLoad,"BL_DEBUG_MSG:checksum success !!\n");
    	usart_send_bytes(payLoad,sizeof(payLoad));
#endif
        // checksum is correct..
        bootloader_send_ack(bl_rx_buffer[0],1);
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	2101      	movs	r1, #1
 8000480:	4618      	mov	r0, r3
 8000482:	f000 f823 	bl	80004cc <bootloader_send_ack>
        bl_version=get_bootloader_version();
 8000486:	f000 f9ad 	bl	80007e4 <get_bootloader_version>
 800048a:	4603      	mov	r3, r0
 800048c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
        sprintf(payLoad,"BL_DEBUG_MSG:BL_VER : %d %#x \r\n",bl_version,bl_version);
 8000490:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8000494:	461a      	mov	r2, r3
 8000496:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800049a:	f107 000c 	add.w	r0, r7, #12
 800049e:	490a      	ldr	r1, [pc, #40]	; (80004c8 <bootloader_handle_getver_cmd+0x84>)
 80004a0:	f000 fbc0 	bl	8000c24 <siprintf>
        usart_send_bytes(payLoad,sizeof(payLoad));
 80004a4:	f107 030c 	add.w	r3, r7, #12
 80004a8:	2164      	movs	r1, #100	; 0x64
 80004aa:	4618      	mov	r0, r3
 80004ac:	f000 fb3e 	bl	8000b2c <usart_send_bytes>
        bootloader_uart_write_data(&bl_version,1);
 80004b0:	f107 0373 	add.w	r3, r7, #115	; 0x73
 80004b4:	2101      	movs	r1, #1
 80004b6:	4618      	mov	r0, r3
 80004b8:	f000 f81e 	bl	80004f8 <bootloader_uart_write_data>
#if(CRC_ENABLED)
    }
#endif


}
 80004bc:	bf00      	nop
 80004be:	3778      	adds	r7, #120	; 0x78
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	0800166c 	.word	0x0800166c
 80004c8:	08001698 	.word	0x08001698

080004cc <bootloader_send_ack>:

/*This function sends ACK if CRC matches along with "len to follow"*/
void bootloader_send_ack(uint8_t command_code, uint8_t follow_len)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b084      	sub	sp, #16
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	460a      	mov	r2, r1
 80004d6:	71fb      	strb	r3, [r7, #7]
 80004d8:	4613      	mov	r3, r2
 80004da:	71bb      	strb	r3, [r7, #6]
	 //here we send 2 byte.. first byte is ack and the second byte is len value
	uint8_t ack_buf[2];
	ack_buf[0] = BL_ACK;
 80004dc:	23a5      	movs	r3, #165	; 0xa5
 80004de:	733b      	strb	r3, [r7, #12]
	ack_buf[1] = follow_len;
 80004e0:	79bb      	ldrb	r3, [r7, #6]
 80004e2:	737b      	strb	r3, [r7, #13]
//	HAL_UART_Transmit(C_UART,ack_buf,2,HAL_MAX_DELAY);
	usart_send_bytes(ack_buf,sizeof(ack_buf));
 80004e4:	f107 030c 	add.w	r3, r7, #12
 80004e8:	2102      	movs	r1, #2
 80004ea:	4618      	mov	r0, r3
 80004ec:	f000 fb1e 	bl	8000b2c <usart_send_bytes>

}
 80004f0:	bf00      	nop
 80004f2:	3710      	adds	r7, #16
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <bootloader_uart_write_data>:

void bootloader_uart_write_data(uint8_t *pBuffer,uint32_t len)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	6039      	str	r1, [r7, #0]
    /*you can replace the below ST's USART driver API call with your MCUs driver API call */
//	HAL_UART_Transmit(C_UART,pBuffer,len,HAL_MAX_DELAY);
	usart_send_bytes(pBuffer,len);
 8000502:	683b      	ldr	r3, [r7, #0]
 8000504:	b2db      	uxtb	r3, r3
 8000506:	4619      	mov	r1, r3
 8000508:	6878      	ldr	r0, [r7, #4]
 800050a:	f000 fb0f 	bl	8000b2c <usart_send_bytes>
}
 800050e:	bf00      	nop
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
	...

08000518 <bootloader_handle_gethelp_cmd>:

/*Helper function to handle BL_GET_HELP command
 * Bootloader sends out All supported Command codes
 */
void bootloader_handle_gethelp_cmd(uint8_t *pBuffer)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b09c      	sub	sp, #112	; 0x70
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
	uint8_t payLoad[100];
	sprintf(payLoad,"BL_DEBUG_MSG:bootloader_handle_gethelp_cmd\n");
 8000520:	f107 0308 	add.w	r3, r7, #8
 8000524:	490d      	ldr	r1, [pc, #52]	; (800055c <bootloader_handle_gethelp_cmd+0x44>)
 8000526:	4618      	mov	r0, r3
 8000528:	f000 fb7c 	bl	8000c24 <siprintf>
    usart_send_bytes(payLoad,sizeof(payLoad));
 800052c:	f107 0308 	add.w	r3, r7, #8
 8000530:	2164      	movs	r1, #100	; 0x64
 8000532:	4618      	mov	r0, r3
 8000534:	f000 fafa 	bl	8000b2c <usart_send_bytes>
	//Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000538:	4b09      	ldr	r3, [pc, #36]	; (8000560 <bootloader_handle_gethelp_cmd+0x48>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	3301      	adds	r3, #1
 800053e:	66fb      	str	r3, [r7, #108]	; 0x6c
	}else
	{
    	sprintf(payLoad,"BL_DEBUG_MSG:checksum success !!\n");
        usart_send_bytes(payLoad,sizeof(payLoad));
#endif
        bootloader_send_ack(pBuffer[0],sizeof(supported_commands));
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	2108      	movs	r1, #8
 8000546:	4618      	mov	r0, r3
 8000548:	f7ff ffc0 	bl	80004cc <bootloader_send_ack>
        bootloader_uart_write_data(supported_commands,sizeof(supported_commands) );
 800054c:	2108      	movs	r1, #8
 800054e:	4805      	ldr	r0, [pc, #20]	; (8000564 <bootloader_handle_gethelp_cmd+0x4c>)
 8000550:	f7ff ffd2 	bl	80004f8 <bootloader_uart_write_data>
#if (CRC_ENABLED)
	}
#endif
}
 8000554:	bf00      	nop
 8000556:	3770      	adds	r7, #112	; 0x70
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	080016b8 	.word	0x080016b8
 8000560:	20000074 	.word	0x20000074
 8000564:	20000000 	.word	0x20000000

08000568 <bootloader_handle_getcid_cmd>:

/*Helper function to handle BL_GET_CID command */
void bootloader_handle_getcid_cmd(uint8_t *pBuffer)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b09e      	sub	sp, #120	; 0x78
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	uint16_t bl_cid_num = 0;
 8000570:	2300      	movs	r3, #0
 8000572:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
	uint8_t payLoad[100];
    sprintf(payLoad,"BL_DEBUG_MSG:bootloader_handle_getcid_cmd\n");
 8000576:	f107 030c 	add.w	r3, r7, #12
 800057a:	4919      	ldr	r1, [pc, #100]	; (80005e0 <bootloader_handle_getcid_cmd+0x78>)
 800057c:	4618      	mov	r0, r3
 800057e:	f000 fb51 	bl	8000c24 <siprintf>
    usart_send_bytes(payLoad,sizeof(payLoad));
 8000582:	f107 030c 	add.w	r3, r7, #12
 8000586:	2164      	movs	r1, #100	; 0x64
 8000588:	4618      	mov	r0, r3
 800058a:	f000 facf 	bl	8000b2c <usart_send_bytes>

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 800058e:	4b15      	ldr	r3, [pc, #84]	; (80005e4 <bootloader_handle_getcid_cmd+0x7c>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	3301      	adds	r3, #1
 8000594:	677b      	str	r3, [r7, #116]	; 0x74
	if (bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
	{
	    sprintf(payLoad,"BL_DEBUG_MSG:checksum success !!\n");
	    usart_send_bytes(payLoad,sizeof(payLoad));
#endif
        bootloader_send_ack(pBuffer[0],2);
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	2102      	movs	r1, #2
 800059c:	4618      	mov	r0, r3
 800059e:	f7ff ff95 	bl	80004cc <bootloader_send_ack>
        bl_cid_num = get_mcu_chip_id();
 80005a2:	f000 f927 	bl	80007f4 <get_mcu_chip_id>
 80005a6:	4603      	mov	r3, r0
 80005a8:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
	    sprintf(payLoad,"BL_DEBUG_MSG:MCU id : %d %#x !!\n",bl_cid_num, bl_cid_num);
 80005ac:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80005b0:	461a      	mov	r2, r3
 80005b2:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80005b6:	f107 000c 	add.w	r0, r7, #12
 80005ba:	490b      	ldr	r1, [pc, #44]	; (80005e8 <bootloader_handle_getcid_cmd+0x80>)
 80005bc:	f000 fb32 	bl	8000c24 <siprintf>
	    usart_send_bytes(payLoad,sizeof(payLoad));
 80005c0:	f107 030c 	add.w	r3, r7, #12
 80005c4:	2164      	movs	r1, #100	; 0x64
 80005c6:	4618      	mov	r0, r3
 80005c8:	f000 fab0 	bl	8000b2c <usart_send_bytes>
        bootloader_uart_write_data((uint8_t *)&bl_cid_num,2);
 80005cc:	f107 0372 	add.w	r3, r7, #114	; 0x72
 80005d0:	2102      	movs	r1, #2
 80005d2:	4618      	mov	r0, r3
 80005d4:	f7ff ff90 	bl	80004f8 <bootloader_uart_write_data>
	    sprintf(payLoad,"BL_DEBUG_MSG:checksum fail !!\n");
	    usart_send_bytes(payLoad,sizeof(payLoad));
        bootloader_send_nack();
	}
#endif
}
 80005d8:	bf00      	nop
 80005da:	3778      	adds	r7, #120	; 0x78
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	080016e4 	.word	0x080016e4
 80005e4:	20000074 	.word	0x20000074
 80005e8:	08001710 	.word	0x08001710

080005ec <bootloader_handle_getrdp_cmd>:

/*Helper function to handle BL_GET_RDP_STATUS command */
void bootloader_handle_getrdp_cmd(uint8_t *pBuffer)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b09e      	sub	sp, #120	; 0x78
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
    uint8_t rdp_level = 0x00;
 80005f4:	2300      	movs	r3, #0
 80005f6:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
    uint8_t payLoad[100];
    sprintf(payLoad,"BL_DEBUG_MSG:bootloader_handle_getrdp_cmd\n");
 80005fa:	f107 030c 	add.w	r3, r7, #12
 80005fe:	4919      	ldr	r1, [pc, #100]	; (8000664 <bootloader_handle_getrdp_cmd+0x78>)
 8000600:	4618      	mov	r0, r3
 8000602:	f000 fb0f 	bl	8000c24 <siprintf>
    usart_send_bytes(payLoad,sizeof(payLoad));
 8000606:	f107 030c 	add.w	r3, r7, #12
 800060a:	2164      	movs	r1, #100	; 0x64
 800060c:	4618      	mov	r0, r3
 800060e:	f000 fa8d 	bl	8000b2c <usart_send_bytes>

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 8000612:	4b15      	ldr	r3, [pc, #84]	; (8000668 <bootloader_handle_getrdp_cmd+0x7c>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	3301      	adds	r3, #1
 8000618:	677b      	str	r3, [r7, #116]	; 0x74
	if (bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
	{
	    sprintf(payLoad,"BL_DEBUG_MSG:checksum success !!\n");
	    usart_send_bytes(payLoad,sizeof(payLoad));
#endif
        bootloader_send_ack(pBuffer[0],1);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2101      	movs	r1, #1
 8000620:	4618      	mov	r0, r3
 8000622:	f7ff ff53 	bl	80004cc <bootloader_send_ack>
        rdp_level = get_flash_rdp_level();
 8000626:	f000 f8f7 	bl	8000818 <get_flash_rdp_level>
 800062a:	4603      	mov	r3, r0
 800062c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
	    sprintf(payLoad,"BL_DEBUG_MSG:RDP level: %d %#x\n",rdp_level,rdp_level);
 8000630:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8000634:	461a      	mov	r2, r3
 8000636:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800063a:	f107 000c 	add.w	r0, r7, #12
 800063e:	490b      	ldr	r1, [pc, #44]	; (800066c <bootloader_handle_getrdp_cmd+0x80>)
 8000640:	f000 faf0 	bl	8000c24 <siprintf>
	    usart_send_bytes(payLoad,sizeof(payLoad));
 8000644:	f107 030c 	add.w	r3, r7, #12
 8000648:	2164      	movs	r1, #100	; 0x64
 800064a:	4618      	mov	r0, r3
 800064c:	f000 fa6e 	bl	8000b2c <usart_send_bytes>
        bootloader_uart_write_data(&rdp_level,1);
 8000650:	f107 0373 	add.w	r3, r7, #115	; 0x73
 8000654:	2101      	movs	r1, #1
 8000656:	4618      	mov	r0, r3
 8000658:	f7ff ff4e 	bl	80004f8 <bootloader_uart_write_data>
	    usart_send_bytes(payLoad,sizeof(payLoad));
        bootloader_send_nack();
	}
#endif

}
 800065c:	bf00      	nop
 800065e:	3778      	adds	r7, #120	; 0x78
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	08001734 	.word	0x08001734
 8000668:	20000074 	.word	0x20000074
 800066c:	08001760 	.word	0x08001760

08000670 <bootloader_handle_go_cmd>:


/*Helper function to handle BL_GO_TO_ADDR command */
void bootloader_handle_go_cmd(uint8_t *pBuffer)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b0a0      	sub	sp, #128	; 0x80
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
    uint32_t go_address=0;
 8000678:	2300      	movs	r3, #0
 800067a:	67fb      	str	r3, [r7, #124]	; 0x7c
    uint8_t addr_valid = ADDR_VALID;
 800067c:	2300      	movs	r3, #0
 800067e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
    uint8_t addr_invalid = ADDR_INVALID;
 8000682:	2301      	movs	r3, #1
 8000684:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
    uint8_t payLoad[100];
    sprintf(payLoad,"BL_DEBUG_MSG:bootloader_handle_go_cmd\n");
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	492d      	ldr	r1, [pc, #180]	; (8000744 <bootloader_handle_go_cmd+0xd4>)
 800068e:	4618      	mov	r0, r3
 8000690:	f000 fac8 	bl	8000c24 <siprintf>
    usart_send_bytes(payLoad,sizeof(payLoad));
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	2164      	movs	r1, #100	; 0x64
 800069a:	4618      	mov	r0, r3
 800069c:	f000 fa46 	bl	8000b2c <usart_send_bytes>

    //Total length of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1 ;
 80006a0:	4b29      	ldr	r3, [pc, #164]	; (8000748 <bootloader_handle_go_cmd+0xd8>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	3301      	adds	r3, #1
 80006a6:	67bb      	str	r3, [r7, #120]	; 0x78
	if ( bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4,host_crc))
	{
	    sprintf(payLoad,"BL_DEBUG_MSG:checksum success !!\n");
	    usart_send_bytes(payLoad,sizeof(payLoad));
#endif
        bootloader_send_ack(pBuffer[0],1);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2101      	movs	r1, #1
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff ff0c 	bl	80004cc <bootloader_send_ack>

        //extract the go address
        go_address = *((uint32_t *)&pBuffer[2] );
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80006ba:	67fb      	str	r3, [r7, #124]	; 0x7c
	    sprintf(payLoad,"BL_DEBUG_MSG:GO addr: %#x\n",go_address);
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80006c2:	4922      	ldr	r1, [pc, #136]	; (800074c <bootloader_handle_go_cmd+0xdc>)
 80006c4:	4618      	mov	r0, r3
 80006c6:	f000 faad 	bl	8000c24 <siprintf>
	    usart_send_bytes(payLoad,sizeof(payLoad));
 80006ca:	f107 030c 	add.w	r3, r7, #12
 80006ce:	2164      	movs	r1, #100	; 0x64
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 fa2b 	bl	8000b2c <usart_send_bytes>
        if( verify_address(go_address) == ADDR_VALID )
 80006d6:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80006d8:	f000 f8b2 	bl	8000840 <verify_address>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d119      	bne.n	8000716 <bootloader_handle_go_cmd+0xa6>
        {
            //tell host that address is fine
            bootloader_uart_write_data(&addr_valid,1);
 80006e2:	f107 0373 	add.w	r3, r7, #115	; 0x73
 80006e6:	2101      	movs	r1, #1
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff ff05 	bl	80004f8 <bootloader_uart_write_data>
            Its not the duty of bootloader. so just trust and jump */

            /* Not doing the below line will result in hardfault exception for ARM cortex M */
            //watch : https://www.youtube.com/watch?v=VX_12SjnNhY

            go_address+=1; //make T bit =1
 80006ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80006f0:	3301      	adds	r3, #1
 80006f2:	67fb      	str	r3, [r7, #124]	; 0x7c

            void (*lets_jump)(void) = (void *)go_address;
 80006f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80006f6:	677b      	str	r3, [r7, #116]	; 0x74
    	    sprintf(payLoad,"BL_DEBUG_MSG: jumping to go address! \n");
 80006f8:	f107 030c 	add.w	r3, r7, #12
 80006fc:	4914      	ldr	r1, [pc, #80]	; (8000750 <bootloader_handle_go_cmd+0xe0>)
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 fa90 	bl	8000c24 <siprintf>
    	    usart_send_bytes(payLoad,sizeof(payLoad));
 8000704:	f107 030c 	add.w	r3, r7, #12
 8000708:	2164      	movs	r1, #100	; 0x64
 800070a:	4618      	mov	r0, r3
 800070c:	f000 fa0e 	bl	8000b2c <usart_send_bytes>
            lets_jump();
 8000710:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000712:	4798      	blx	r3
	    usart_send_bytes(payLoad,sizeof(payLoad));
        bootloader_send_nack();
	}
#endif

}
 8000714:	e011      	b.n	800073a <bootloader_handle_go_cmd+0xca>
    	    sprintf(payLoad,"BL_DEBUG_MSG:GO addr invalid ! \n");
 8000716:	f107 030c 	add.w	r3, r7, #12
 800071a:	490e      	ldr	r1, [pc, #56]	; (8000754 <bootloader_handle_go_cmd+0xe4>)
 800071c:	4618      	mov	r0, r3
 800071e:	f000 fa81 	bl	8000c24 <siprintf>
    	    usart_send_bytes(payLoad,sizeof(payLoad));
 8000722:	f107 030c 	add.w	r3, r7, #12
 8000726:	2164      	movs	r1, #100	; 0x64
 8000728:	4618      	mov	r0, r3
 800072a:	f000 f9ff 	bl	8000b2c <usart_send_bytes>
            bootloader_uart_write_data(&addr_invalid,1);
 800072e:	f107 0372 	add.w	r3, r7, #114	; 0x72
 8000732:	2101      	movs	r1, #1
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff fedf 	bl	80004f8 <bootloader_uart_write_data>
}
 800073a:	bf00      	nop
 800073c:	3780      	adds	r7, #128	; 0x80
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	08001780 	.word	0x08001780
 8000748:	20000074 	.word	0x20000074
 800074c:	080017a8 	.word	0x080017a8
 8000750:	080017c4 	.word	0x080017c4
 8000754:	080017ec 	.word	0x080017ec

08000758 <bootloader_handle_flash_erase_cmd>:


/*Helper function to handle BL_FLASH_ERASE command */
void bootloader_handle_flash_erase_cmd(uint8_t *pBuffer)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
	    usart_send_bytes(payLoad,sizeof(payLoad));
        bootloader_send_nack();
	}
#endif
#endif
}
 8000760:	bf00      	nop
 8000762:	370c      	adds	r7, #12
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr

0800076c <bootloader_handle_mem_write_cmd>:



/*Helper function to handle BL_MEM_WRITE command */
void bootloader_handle_mem_write_cmd(uint8_t *pBuffer)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	    usart_send_bytes(payLoad,sizeof(payLoad));
        bootloader_send_nack();
	}
#endif
#endif
}
 8000774:	bf00      	nop
 8000776:	370c      	adds	r7, #12
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr

08000780 <bootloader_handle_en_rw_protect>:



/*Helper function to handle BL_EN_RW_PROTECT  command */
void bootloader_handle_en_rw_protect(uint8_t *pBuffer)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
        bootloader_send_nack();
	}

#endif
#endif
}
 8000788:	bf00      	nop
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr

08000794 <bootloader_handle_dis_rw_protect>:



/*Helper function to handle BL_EN_RW_PROTECT  command */
void bootloader_handle_dis_rw_protect(uint8_t *pBuffer)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  	    usart_send_bytes(payLoad,sizeof(payLoad));
        bootloader_send_nack();
	}
#endif
#endif
}
 800079c:	bf00      	nop
 800079e:	370c      	adds	r7, #12
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <bootloader_handle_mem_read>:



/*Helper function to handle BL_MEM_READ command */
void bootloader_handle_mem_read (uint8_t *pBuffer)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]


}
 80007b0:	bf00      	nop
 80007b2:	370c      	adds	r7, #12
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr

080007bc <bootloader_handle_read_sector_protection_status>:


/*Helper function to handle _BL_READ_SECTOR_P_STATUS command */
void bootloader_handle_read_sector_protection_status(uint8_t *pBuffer)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  	    usart_send_bytes(payLoad,sizeof(payLoad));
        bootloader_send_nack();
	}
#endif
#endif
}
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <bootloader_handle_read_otp>:


/*Helper function to handle BL_OTP_READ command */
void bootloader_handle_read_otp(uint8_t *pBuffer)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]


}
 80007d8:	bf00      	nop
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr

080007e4 <get_bootloader_version>:

//Just returns the macro value .
uint8_t get_bootloader_version()
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  return (uint8_t)BL_VERSION;
 80007e8:	2310      	movs	r3, #16
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <get_mcu_chip_id>:

//Read the chip identifier or device Identifier
uint16_t get_mcu_chip_id()
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
	and the die revision. It is part of the DBG_MCU component and is mapped on the
	external PPB bus (see Section 33.16 on page 1304). This code is accessible using the
	JTAG debug pCat.2ort (4 to 5 pins) or the SW debug port (two pins) or by the user software.
	It is even accessible while the MCU is under system reset. */
	uint16_t cid;
	cid = (uint16_t)(DBGMCU->IDCODE) & 0x0FFF;
 80007fa:	4b06      	ldr	r3, [pc, #24]	; (8000814 <get_mcu_chip_id+0x20>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	b29b      	uxth	r3, r3
 8000800:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000804:	80fb      	strh	r3, [r7, #6]
	return  cid;
 8000806:	88fb      	ldrh	r3, [r7, #6]

}
 8000808:	4618      	mov	r0, r3
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr
 8000814:	e0042000 	.word	0xe0042000

08000818 <get_flash_rdp_level>:

/*This function reads the RDP ( Read protection option byte) value
 *For more info refer "Table 9. Description of the option bytes" in stm32f446xx RM
 */
uint8_t get_flash_rdp_level(void)
{
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0

	uint8_t rdp_status=0;
 800081e:	2300      	movs	r3, #0
 8000820:	71fb      	strb	r3, [r7, #7]
	FLASH_OBProgramInitTypeDef  ob_handle;
	HAL_FLASHEx_OBGetConfig(&ob_handle);
	rdp_status = (uint8_t)ob_handle.RDPLevel;
#else

	 volatile uint32_t *pOB_addr = (uint32_t*) 0x1FFFC000;
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <get_flash_rdp_level+0x24>)
 8000824:	603b      	str	r3, [r7, #0]
	 rdp_status =  (uint8_t)(*pOB_addr >> 8) ;
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	0a1b      	lsrs	r3, r3, #8
 800082c:	71fb      	strb	r3, [r7, #7]
#endif

	return rdp_status;
 800082e:	79fb      	ldrb	r3, [r7, #7]

}
 8000830:	4618      	mov	r0, r3
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	1fffc000 	.word	0x1fffc000

08000840 <verify_address>:

//verify the address sent by the host .
uint8_t verify_address(uint32_t go_address)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	//can we jump to backup sram memory ? yes
	//can we jump to peripheral memory ? its possible , but dont allow. so no
	//can we jump to external memory ? yes.

//incomplete -poorly written .. optimize it
	if ( go_address >= SRAM1_BASE && go_address <= SRAM1_END)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800084e:	d305      	bcc.n	800085c <verify_address+0x1c>
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	4a0b      	ldr	r2, [pc, #44]	; (8000880 <verify_address+0x40>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d801      	bhi.n	800085c <verify_address+0x1c>
	{
		return ADDR_VALID;
 8000858:	2300      	movs	r3, #0
 800085a:	e00a      	b.n	8000872 <verify_address+0x32>
	}
	else if ( go_address >= FLASH_BASE && go_address <= FLASH_END)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000862:	d305      	bcc.n	8000870 <verify_address+0x30>
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	4a07      	ldr	r2, [pc, #28]	; (8000884 <verify_address+0x44>)
 8000868:	4293      	cmp	r3, r2
 800086a:	d801      	bhi.n	8000870 <verify_address+0x30>
	{
		return ADDR_VALID;
 800086c:	2300      	movs	r3, #0
 800086e:	e000      	b.n	8000872 <verify_address+0x32>
	}
	else
		return ADDR_INVALID;
 8000870:	2301      	movs	r3, #1
}
 8000872:	4618      	mov	r0, r3
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	20020000 	.word	0x20020000
 8000884:	0807ffff 	.word	0x0807ffff

08000888 <gpio_init>:
#include "gpio.h"

void gpio_init()
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= (1<<2);
 800088c:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <gpio_init+0x34>)
 800088e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000890:	4a0a      	ldr	r2, [pc, #40]	; (80008bc <gpio_init+0x34>)
 8000892:	f043 0304 	orr.w	r3, r3, #4
 8000896:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set push button(i.e. PC13) as input pin*/
	GPIOC->MODER &= ~(1<<26);
 8000898:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <gpio_init+0x38>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a08      	ldr	r2, [pc, #32]	; (80008c0 <gpio_init+0x38>)
 800089e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80008a2:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~(1<<27);
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <gpio_init+0x38>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a05      	ldr	r2, [pc, #20]	; (80008c0 <gpio_init+0x38>)
 80008aa:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80008ae:	6013      	str	r3, [r2, #0]
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40020800 	.word	0x40020800

080008c4 <isButtonPressed>:

uint8_t isButtonPressed()
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
	return ((GPIOC->IDR & (1<<13)) == (1<<13));
 80008c8:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <isButtonPressed+0x24>)
 80008ca:	691b      	ldr	r3, [r3, #16]
 80008cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008d4:	bf0c      	ite	eq
 80008d6:	2301      	moveq	r3, #1
 80008d8:	2300      	movne	r3, #0
 80008da:	b2db      	uxtb	r3, r3
}
 80008dc:	4618      	mov	r0, r3
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	40020800 	.word	0x40020800

080008ec <led2_init>:
#include "led.h"
#define GPIOAEN  (1<<0)         /* IO port A clock enable*/
#define LED_ON   (1<<5)
void led2_init()
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
	/*Enable clock access to led port (Port A). If we Enable it after selecting Mode it wont work*/
	RCC->AHB1ENR |= GPIOAEN;
 80008f0:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <led2_init+0x34>)
 80008f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f4:	4a0a      	ldr	r2, [pc, #40]	; (8000920 <led2_init+0x34>)
 80008f6:	f043 0301 	orr.w	r3, r3, #1
 80008fa:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set led pin(i.e. PA5) as output pin*/
	GPIOA->MODER |= (1<<10);
 80008fc:	4b09      	ldr	r3, [pc, #36]	; (8000924 <led2_init+0x38>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a08      	ldr	r2, [pc, #32]	; (8000924 <led2_init+0x38>)
 8000902:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000906:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1<<11);
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <led2_init+0x38>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a05      	ldr	r2, [pc, #20]	; (8000924 <led2_init+0x38>)
 800090e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000912:	6013      	str	r3, [r2, #0]
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	40023800 	.word	0x40023800
 8000924:	40020000 	.word	0x40020000

08000928 <main>:
//	}
//}


int main()
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b09a      	sub	sp, #104	; 0x68
 800092c:	af00      	add	r7, sp, #0
	gpio_init();
 800092e:	f7ff ffab 	bl	8000888 <gpio_init>
	led2_init();
 8000932:	f7ff ffdb 	bl	80008ec <led2_init>
	usart_init();
 8000936:	f000 f859 	bl	80009ec <usart_init>
	uint8_t payLoad[100];
	while(1)
	{
	  if ( isButtonPressed() == 0 )
 800093a:	f7ff ffc3 	bl	80008c4 <isButtonPressed>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d10c      	bne.n	800095e <main+0x36>
	  {
		  sprintf(payLoad,"BL_DEBUG_MSG:Button is pressed .. going to BL mode\n\r") ;
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	490c      	ldr	r1, [pc, #48]	; (8000978 <main+0x50>)
 8000948:	4618      	mov	r0, r3
 800094a:	f000 f96b 	bl	8000c24 <siprintf>
		  usart_send_bytes(payLoad,sizeof(payLoad));
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	2164      	movs	r1, #100	; 0x64
 8000952:	4618      	mov	r0, r3
 8000954:	f000 f8ea 	bl	8000b2c <usart_send_bytes>
		  //we should continue in bootloader mode
		  bootloader_uart_read_data();
 8000958:	f7ff fc92 	bl	8000280 <bootloader_uart_read_data>
 800095c:	e7ed      	b.n	800093a <main+0x12>

	  }
	  else
	  {
		  sprintf(payLoad,"BL_DEBUG_MSG:Button is not pressed .. executing user app\n" );
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	4906      	ldr	r1, [pc, #24]	; (800097c <main+0x54>)
 8000962:	4618      	mov	r0, r3
 8000964:	f000 f95e 	bl	8000c24 <siprintf>
		  usart_send_bytes(payLoad,sizeof(payLoad));
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	2164      	movs	r1, #100	; 0x64
 800096c:	4618      	mov	r0, r3
 800096e:	f000 f8dd 	bl	8000b2c <usart_send_bytes>
			//jump to user application
			bootloader_jump_to_user_app();
 8000972:	f7ff fd25 	bl	80003c0 <bootloader_jump_to_user_app>
	  if ( isButtonPressed() == 0 )
 8000976:	e7e0      	b.n	800093a <main+0x12>
 8000978:	08001810 	.word	0x08001810
 800097c:	08001848 	.word	0x08001848

08000980 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000988:	4a14      	ldr	r2, [pc, #80]	; (80009dc <_sbrk+0x5c>)
 800098a:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <_sbrk+0x60>)
 800098c:	1ad3      	subs	r3, r2, r3
 800098e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000994:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <_sbrk+0x64>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d102      	bne.n	80009a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800099c:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <_sbrk+0x64>)
 800099e:	4a12      	ldr	r2, [pc, #72]	; (80009e8 <_sbrk+0x68>)
 80009a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009a2:	4b10      	ldr	r3, [pc, #64]	; (80009e4 <_sbrk+0x64>)
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4413      	add	r3, r2
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d207      	bcs.n	80009c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009b0:	f000 f960 	bl	8000c74 <__errno>
 80009b4:	4603      	mov	r3, r0
 80009b6:	220c      	movs	r2, #12
 80009b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ba:	f04f 33ff 	mov.w	r3, #4294967295
 80009be:	e009      	b.n	80009d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009c0:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <_sbrk+0x64>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009c6:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <_sbrk+0x64>)
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4413      	add	r3, r2
 80009ce:	4a05      	ldr	r2, [pc, #20]	; (80009e4 <_sbrk+0x64>)
 80009d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009d2:	68fb      	ldr	r3, [r7, #12]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3718      	adds	r7, #24
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20020000 	.word	0x20020000
 80009e0:	00000400 	.word	0x00000400
 80009e4:	2000013c 	.word	0x2000013c
 80009e8:	20000288 	.word	0x20000288

080009ec <usart_init>:
#include "usart.h"

void usart_init()
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= (1<<0);
 80009f0:	4b3f      	ldr	r3, [pc, #252]	; (8000af0 <usart_init+0x104>)
 80009f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f4:	4a3e      	ldr	r2, [pc, #248]	; (8000af0 <usart_init+0x104>)
 80009f6:	f043 0301 	orr.w	r3, r3, #1
 80009fa:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER &= ~(1<<4);
 80009fc:	4b3d      	ldr	r3, [pc, #244]	; (8000af4 <usart_init+0x108>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a3c      	ldr	r2, [pc, #240]	; (8000af4 <usart_init+0x108>)
 8000a02:	f023 0310 	bic.w	r3, r3, #16
 8000a06:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1<<5);
 8000a08:	4b3a      	ldr	r3, [pc, #232]	; (8000af4 <usart_init+0x108>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a39      	ldr	r2, [pc, #228]	; (8000af4 <usart_init+0x108>)
 8000a0e:	f043 0320 	orr.w	r3, r3, #32
 8000a12:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[0] |= (1<<8);
 8000a14:	4b37      	ldr	r3, [pc, #220]	; (8000af4 <usart_init+0x108>)
 8000a16:	6a1b      	ldr	r3, [r3, #32]
 8000a18:	4a36      	ldr	r2, [pc, #216]	; (8000af4 <usart_init+0x108>)
 8000a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a1e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1<<9);
 8000a20:	4b34      	ldr	r3, [pc, #208]	; (8000af4 <usart_init+0x108>)
 8000a22:	6a1b      	ldr	r3, [r3, #32]
 8000a24:	4a33      	ldr	r2, [pc, #204]	; (8000af4 <usart_init+0x108>)
 8000a26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a2a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1<<10);
 8000a2c:	4b31      	ldr	r3, [pc, #196]	; (8000af4 <usart_init+0x108>)
 8000a2e:	6a1b      	ldr	r3, [r3, #32]
 8000a30:	4a30      	ldr	r2, [pc, #192]	; (8000af4 <usart_init+0x108>)
 8000a32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a36:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1<<11);
 8000a38:	4b2e      	ldr	r3, [pc, #184]	; (8000af4 <usart_init+0x108>)
 8000a3a:	6a1b      	ldr	r3, [r3, #32]
 8000a3c:	4a2d      	ldr	r2, [pc, #180]	; (8000af4 <usart_init+0x108>)
 8000a3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000a42:	6213      	str	r3, [r2, #32]
//
//	USART2->CR2 &= ~(1<<12);
//	USART2->CR2 &= ~(1<<13);
//
//	USART2->CR3 &= ~(1<<7);
	RCC->APB1ENR |= (1<<17);
 8000a44:	4b2a      	ldr	r3, [pc, #168]	; (8000af0 <usart_init+0x104>)
 8000a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a48:	4a29      	ldr	r2, [pc, #164]	; (8000af0 <usart_init+0x104>)
 8000a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a4e:	6413      	str	r3, [r2, #64]	; 0x40
	USART2->BRR = (((16000000/(16*115200))<<4) + ((16000000/(16*115200)) & 0x0F));
 8000a50:	4b29      	ldr	r3, [pc, #164]	; (8000af8 <usart_init+0x10c>)
 8000a52:	2288      	movs	r2, #136	; 0x88
 8000a54:	609a      	str	r2, [r3, #8]

	USART2->CR1 |= (1<<3);
 8000a56:	4b28      	ldr	r3, [pc, #160]	; (8000af8 <usart_init+0x10c>)
 8000a58:	68db      	ldr	r3, [r3, #12]
 8000a5a:	4a27      	ldr	r2, [pc, #156]	; (8000af8 <usart_init+0x10c>)
 8000a5c:	f043 0308 	orr.w	r3, r3, #8
 8000a60:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= (1<<13);
 8000a62:	4b25      	ldr	r3, [pc, #148]	; (8000af8 <usart_init+0x10c>)
 8000a64:	68db      	ldr	r3, [r3, #12]
 8000a66:	4a24      	ldr	r2, [pc, #144]	; (8000af8 <usart_init+0x10c>)
 8000a68:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a6c:	60d3      	str	r3, [r2, #12]



//	RCC->AHB1ENR |= (1<<0);

	GPIOA->MODER &= ~(1<<6);
 8000a6e:	4b21      	ldr	r3, [pc, #132]	; (8000af4 <usart_init+0x108>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a20      	ldr	r2, [pc, #128]	; (8000af4 <usart_init+0x108>)
 8000a74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a78:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1<<7);
 8000a7a:	4b1e      	ldr	r3, [pc, #120]	; (8000af4 <usart_init+0x108>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a1d      	ldr	r2, [pc, #116]	; (8000af4 <usart_init+0x108>)
 8000a80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a84:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[0] |= (1<<12);
 8000a86:	4b1b      	ldr	r3, [pc, #108]	; (8000af4 <usart_init+0x108>)
 8000a88:	6a1b      	ldr	r3, [r3, #32]
 8000a8a:	4a1a      	ldr	r2, [pc, #104]	; (8000af4 <usart_init+0x108>)
 8000a8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a90:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1<<13);
 8000a92:	4b18      	ldr	r3, [pc, #96]	; (8000af4 <usart_init+0x108>)
 8000a94:	6a1b      	ldr	r3, [r3, #32]
 8000a96:	4a17      	ldr	r2, [pc, #92]	; (8000af4 <usart_init+0x108>)
 8000a98:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a9c:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1<<14);
 8000a9e:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <usart_init+0x108>)
 8000aa0:	6a1b      	ldr	r3, [r3, #32]
 8000aa2:	4a14      	ldr	r2, [pc, #80]	; (8000af4 <usart_init+0x108>)
 8000aa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa8:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1<<15);
 8000aaa:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <usart_init+0x108>)
 8000aac:	6a1b      	ldr	r3, [r3, #32]
 8000aae:	4a11      	ldr	r2, [pc, #68]	; (8000af4 <usart_init+0x108>)
 8000ab0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000ab4:	6213      	str	r3, [r2, #32]

//	RCC->APB1ENR |= (1<<17);

//	USART2->CR1 |= (1<<13);
//	USART2->CR1 &= ~(1<<12);
	USART2->CR1 |= (1<<2);
 8000ab6:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <usart_init+0x10c>)
 8000ab8:	68db      	ldr	r3, [r3, #12]
 8000aba:	4a0f      	ldr	r2, [pc, #60]	; (8000af8 <usart_init+0x10c>)
 8000abc:	f043 0304 	orr.w	r3, r3, #4
 8000ac0:	60d3      	str	r3, [r2, #12]

	USART2->CR2 &= ~(1<<12);
 8000ac2:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <usart_init+0x10c>)
 8000ac4:	691b      	ldr	r3, [r3, #16]
 8000ac6:	4a0c      	ldr	r2, [pc, #48]	; (8000af8 <usart_init+0x10c>)
 8000ac8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000acc:	6113      	str	r3, [r2, #16]
	USART2->CR2 &= ~(1<<13);
 8000ace:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <usart_init+0x10c>)
 8000ad0:	691b      	ldr	r3, [r3, #16]
 8000ad2:	4a09      	ldr	r2, [pc, #36]	; (8000af8 <usart_init+0x10c>)
 8000ad4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000ad8:	6113      	str	r3, [r2, #16]

//	USART2->BRR = (((16000000/(16*115200))<<4) + ((16000000/(16*115200)) & 0x0F));

	USART2->CR3 &= ~(1<<6);
 8000ada:	4b07      	ldr	r3, [pc, #28]	; (8000af8 <usart_init+0x10c>)
 8000adc:	695b      	ldr	r3, [r3, #20]
 8000ade:	4a06      	ldr	r2, [pc, #24]	; (8000af8 <usart_init+0x10c>)
 8000ae0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000ae4:	6153      	str	r3, [r2, #20]
}
 8000ae6:	bf00      	nop
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40020000 	.word	0x40020000
 8000af8:	40004400 	.word	0x40004400

08000afc <usart_send_char>:

void usart_send_char(uint8_t data)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	71fb      	strb	r3, [r7, #7]
	while(!(USART2->SR & (1<<6))){}
 8000b06:	bf00      	nop
 8000b08:	4b07      	ldr	r3, [pc, #28]	; (8000b28 <usart_send_char+0x2c>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d0f9      	beq.n	8000b08 <usart_send_char+0xc>
	USART2->DR = data;
 8000b14:	4a04      	ldr	r2, [pc, #16]	; (8000b28 <usart_send_char+0x2c>)
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	6053      	str	r3, [r2, #4]
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	40004400 	.word	0x40004400

08000b2c <usart_send_bytes>:

void usart_send_bytes(uint8_t data[],uint8_t byteLength)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	460b      	mov	r3, r1
 8000b36:	70fb      	strb	r3, [r7, #3]
	for(uint8_t i=0;i<byteLength-1;i++)
 8000b38:	2300      	movs	r3, #0
 8000b3a:	73fb      	strb	r3, [r7, #15]
 8000b3c:	e009      	b.n	8000b52 <usart_send_bytes+0x26>
	{
		usart_send_char(data[i]);
 8000b3e:	7bfb      	ldrb	r3, [r7, #15]
 8000b40:	687a      	ldr	r2, [r7, #4]
 8000b42:	4413      	add	r3, r2
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff ffd8 	bl	8000afc <usart_send_char>
	for(uint8_t i=0;i<byteLength-1;i++)
 8000b4c:	7bfb      	ldrb	r3, [r7, #15]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	73fb      	strb	r3, [r7, #15]
 8000b52:	7bfa      	ldrb	r2, [r7, #15]
 8000b54:	78fb      	ldrb	r3, [r7, #3]
 8000b56:	3b01      	subs	r3, #1
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	dbf0      	blt.n	8000b3e <usart_send_bytes+0x12>
	}
}
 8000b5c:	bf00      	nop
 8000b5e:	bf00      	nop
 8000b60:	3710      	adds	r7, #16
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <usart_receive_char>:

void usart_receive_char(uint8_t *data)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
	while(!(USART2->SR & (1<<5))){}
 8000b70:	bf00      	nop
 8000b72:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <usart_receive_char+0x2c>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f003 0320 	and.w	r3, r3, #32
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d0f9      	beq.n	8000b72 <usart_receive_char+0xa>
	*data = USART2->DR;
 8000b7e:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <usart_receive_char+0x2c>)
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	b2da      	uxtb	r2, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	701a      	strb	r2, [r3, #0]
}
 8000b88:	bf00      	nop
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	40004400 	.word	0x40004400

08000b98 <usart_receive_bytes>:

void usart_receive_bytes(uint8_t data[],uint8_t byteLength)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	70fb      	strb	r3, [r7, #3]
	for(uint8_t i=0;i<byteLength-1;i++)
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	73fb      	strb	r3, [r7, #15]
 8000ba8:	e008      	b.n	8000bbc <usart_receive_bytes+0x24>
	{
		usart_receive_char(&data[i]);
 8000baa:	7bfb      	ldrb	r3, [r7, #15]
 8000bac:	687a      	ldr	r2, [r7, #4]
 8000bae:	4413      	add	r3, r2
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff ffd9 	bl	8000b68 <usart_receive_char>
	for(uint8_t i=0;i<byteLength-1;i++)
 8000bb6:	7bfb      	ldrb	r3, [r7, #15]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	73fb      	strb	r3, [r7, #15]
 8000bbc:	7bfa      	ldrb	r2, [r7, #15]
 8000bbe:	78fb      	ldrb	r3, [r7, #3]
 8000bc0:	3b01      	subs	r3, #1
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	dbf1      	blt.n	8000baa <usart_receive_bytes+0x12>
	}
}
 8000bc6:	bf00      	nop
 8000bc8:	bf00      	nop
 8000bca:	3710      	adds	r7, #16
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bd0:	480d      	ldr	r0, [pc, #52]	; (8000c08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bd2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bd4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bd8:	480c      	ldr	r0, [pc, #48]	; (8000c0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000bda:	490d      	ldr	r1, [pc, #52]	; (8000c10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bdc:	4a0d      	ldr	r2, [pc, #52]	; (8000c14 <LoopForever+0xe>)
  movs r3, #0
 8000bde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be0:	e002      	b.n	8000be8 <LoopCopyDataInit>

08000be2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000be2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be6:	3304      	adds	r3, #4

08000be8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bec:	d3f9      	bcc.n	8000be2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bee:	4a0a      	ldr	r2, [pc, #40]	; (8000c18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bf0:	4c0a      	ldr	r4, [pc, #40]	; (8000c1c <LoopForever+0x16>)
  movs r3, #0
 8000bf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf4:	e001      	b.n	8000bfa <LoopFillZerobss>

08000bf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf8:	3204      	adds	r2, #4

08000bfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bfc:	d3fb      	bcc.n	8000bf6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bfe:	f000 f83f 	bl	8000c80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c02:	f7ff fe91 	bl	8000928 <main>

08000c06 <LoopForever>:

LoopForever:
  b LoopForever
 8000c06:	e7fe      	b.n	8000c06 <LoopForever>
  ldr   r0, =_estack
 8000c08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c10:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8000c14:	080018c0 	.word	0x080018c0
  ldr r2, =_sbss
 8000c18:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8000c1c:	20000288 	.word	0x20000288

08000c20 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c20:	e7fe      	b.n	8000c20 <ADC_IRQHandler>
	...

08000c24 <siprintf>:
 8000c24:	b40e      	push	{r1, r2, r3}
 8000c26:	b500      	push	{lr}
 8000c28:	b09c      	sub	sp, #112	; 0x70
 8000c2a:	ab1d      	add	r3, sp, #116	; 0x74
 8000c2c:	9002      	str	r0, [sp, #8]
 8000c2e:	9006      	str	r0, [sp, #24]
 8000c30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000c34:	4809      	ldr	r0, [pc, #36]	; (8000c5c <siprintf+0x38>)
 8000c36:	9107      	str	r1, [sp, #28]
 8000c38:	9104      	str	r1, [sp, #16]
 8000c3a:	4909      	ldr	r1, [pc, #36]	; (8000c60 <siprintf+0x3c>)
 8000c3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8000c40:	9105      	str	r1, [sp, #20]
 8000c42:	6800      	ldr	r0, [r0, #0]
 8000c44:	9301      	str	r3, [sp, #4]
 8000c46:	a902      	add	r1, sp, #8
 8000c48:	f000 f992 	bl	8000f70 <_svfiprintf_r>
 8000c4c:	9b02      	ldr	r3, [sp, #8]
 8000c4e:	2200      	movs	r2, #0
 8000c50:	701a      	strb	r2, [r3, #0]
 8000c52:	b01c      	add	sp, #112	; 0x70
 8000c54:	f85d eb04 	ldr.w	lr, [sp], #4
 8000c58:	b003      	add	sp, #12
 8000c5a:	4770      	bx	lr
 8000c5c:	20000054 	.word	0x20000054
 8000c60:	ffff0208 	.word	0xffff0208

08000c64 <memset>:
 8000c64:	4402      	add	r2, r0
 8000c66:	4603      	mov	r3, r0
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d100      	bne.n	8000c6e <memset+0xa>
 8000c6c:	4770      	bx	lr
 8000c6e:	f803 1b01 	strb.w	r1, [r3], #1
 8000c72:	e7f9      	b.n	8000c68 <memset+0x4>

08000c74 <__errno>:
 8000c74:	4b01      	ldr	r3, [pc, #4]	; (8000c7c <__errno+0x8>)
 8000c76:	6818      	ldr	r0, [r3, #0]
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	20000054 	.word	0x20000054

08000c80 <__libc_init_array>:
 8000c80:	b570      	push	{r4, r5, r6, lr}
 8000c82:	4d0d      	ldr	r5, [pc, #52]	; (8000cb8 <__libc_init_array+0x38>)
 8000c84:	4c0d      	ldr	r4, [pc, #52]	; (8000cbc <__libc_init_array+0x3c>)
 8000c86:	1b64      	subs	r4, r4, r5
 8000c88:	10a4      	asrs	r4, r4, #2
 8000c8a:	2600      	movs	r6, #0
 8000c8c:	42a6      	cmp	r6, r4
 8000c8e:	d109      	bne.n	8000ca4 <__libc_init_array+0x24>
 8000c90:	4d0b      	ldr	r5, [pc, #44]	; (8000cc0 <__libc_init_array+0x40>)
 8000c92:	4c0c      	ldr	r4, [pc, #48]	; (8000cc4 <__libc_init_array+0x44>)
 8000c94:	f000 fc6a 	bl	800156c <_init>
 8000c98:	1b64      	subs	r4, r4, r5
 8000c9a:	10a4      	asrs	r4, r4, #2
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	42a6      	cmp	r6, r4
 8000ca0:	d105      	bne.n	8000cae <__libc_init_array+0x2e>
 8000ca2:	bd70      	pop	{r4, r5, r6, pc}
 8000ca4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ca8:	4798      	blx	r3
 8000caa:	3601      	adds	r6, #1
 8000cac:	e7ee      	b.n	8000c8c <__libc_init_array+0xc>
 8000cae:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cb2:	4798      	blx	r3
 8000cb4:	3601      	adds	r6, #1
 8000cb6:	e7f2      	b.n	8000c9e <__libc_init_array+0x1e>
 8000cb8:	080018b8 	.word	0x080018b8
 8000cbc:	080018b8 	.word	0x080018b8
 8000cc0:	080018b8 	.word	0x080018b8
 8000cc4:	080018bc 	.word	0x080018bc

08000cc8 <__retarget_lock_acquire_recursive>:
 8000cc8:	4770      	bx	lr

08000cca <__retarget_lock_release_recursive>:
 8000cca:	4770      	bx	lr

08000ccc <_free_r>:
 8000ccc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000cce:	2900      	cmp	r1, #0
 8000cd0:	d044      	beq.n	8000d5c <_free_r+0x90>
 8000cd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000cd6:	9001      	str	r0, [sp, #4]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	f1a1 0404 	sub.w	r4, r1, #4
 8000cde:	bfb8      	it	lt
 8000ce0:	18e4      	addlt	r4, r4, r3
 8000ce2:	f000 f8df 	bl	8000ea4 <__malloc_lock>
 8000ce6:	4a1e      	ldr	r2, [pc, #120]	; (8000d60 <_free_r+0x94>)
 8000ce8:	9801      	ldr	r0, [sp, #4]
 8000cea:	6813      	ldr	r3, [r2, #0]
 8000cec:	b933      	cbnz	r3, 8000cfc <_free_r+0x30>
 8000cee:	6063      	str	r3, [r4, #4]
 8000cf0:	6014      	str	r4, [r2, #0]
 8000cf2:	b003      	add	sp, #12
 8000cf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000cf8:	f000 b8da 	b.w	8000eb0 <__malloc_unlock>
 8000cfc:	42a3      	cmp	r3, r4
 8000cfe:	d908      	bls.n	8000d12 <_free_r+0x46>
 8000d00:	6825      	ldr	r5, [r4, #0]
 8000d02:	1961      	adds	r1, r4, r5
 8000d04:	428b      	cmp	r3, r1
 8000d06:	bf01      	itttt	eq
 8000d08:	6819      	ldreq	r1, [r3, #0]
 8000d0a:	685b      	ldreq	r3, [r3, #4]
 8000d0c:	1949      	addeq	r1, r1, r5
 8000d0e:	6021      	streq	r1, [r4, #0]
 8000d10:	e7ed      	b.n	8000cee <_free_r+0x22>
 8000d12:	461a      	mov	r2, r3
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	b10b      	cbz	r3, 8000d1c <_free_r+0x50>
 8000d18:	42a3      	cmp	r3, r4
 8000d1a:	d9fa      	bls.n	8000d12 <_free_r+0x46>
 8000d1c:	6811      	ldr	r1, [r2, #0]
 8000d1e:	1855      	adds	r5, r2, r1
 8000d20:	42a5      	cmp	r5, r4
 8000d22:	d10b      	bne.n	8000d3c <_free_r+0x70>
 8000d24:	6824      	ldr	r4, [r4, #0]
 8000d26:	4421      	add	r1, r4
 8000d28:	1854      	adds	r4, r2, r1
 8000d2a:	42a3      	cmp	r3, r4
 8000d2c:	6011      	str	r1, [r2, #0]
 8000d2e:	d1e0      	bne.n	8000cf2 <_free_r+0x26>
 8000d30:	681c      	ldr	r4, [r3, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	6053      	str	r3, [r2, #4]
 8000d36:	440c      	add	r4, r1
 8000d38:	6014      	str	r4, [r2, #0]
 8000d3a:	e7da      	b.n	8000cf2 <_free_r+0x26>
 8000d3c:	d902      	bls.n	8000d44 <_free_r+0x78>
 8000d3e:	230c      	movs	r3, #12
 8000d40:	6003      	str	r3, [r0, #0]
 8000d42:	e7d6      	b.n	8000cf2 <_free_r+0x26>
 8000d44:	6825      	ldr	r5, [r4, #0]
 8000d46:	1961      	adds	r1, r4, r5
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	bf04      	itt	eq
 8000d4c:	6819      	ldreq	r1, [r3, #0]
 8000d4e:	685b      	ldreq	r3, [r3, #4]
 8000d50:	6063      	str	r3, [r4, #4]
 8000d52:	bf04      	itt	eq
 8000d54:	1949      	addeq	r1, r1, r5
 8000d56:	6021      	streq	r1, [r4, #0]
 8000d58:	6054      	str	r4, [r2, #4]
 8000d5a:	e7ca      	b.n	8000cf2 <_free_r+0x26>
 8000d5c:	b003      	add	sp, #12
 8000d5e:	bd30      	pop	{r4, r5, pc}
 8000d60:	20000280 	.word	0x20000280

08000d64 <sbrk_aligned>:
 8000d64:	b570      	push	{r4, r5, r6, lr}
 8000d66:	4e0e      	ldr	r6, [pc, #56]	; (8000da0 <sbrk_aligned+0x3c>)
 8000d68:	460c      	mov	r4, r1
 8000d6a:	6831      	ldr	r1, [r6, #0]
 8000d6c:	4605      	mov	r5, r0
 8000d6e:	b911      	cbnz	r1, 8000d76 <sbrk_aligned+0x12>
 8000d70:	f000 fba6 	bl	80014c0 <_sbrk_r>
 8000d74:	6030      	str	r0, [r6, #0]
 8000d76:	4621      	mov	r1, r4
 8000d78:	4628      	mov	r0, r5
 8000d7a:	f000 fba1 	bl	80014c0 <_sbrk_r>
 8000d7e:	1c43      	adds	r3, r0, #1
 8000d80:	d00a      	beq.n	8000d98 <sbrk_aligned+0x34>
 8000d82:	1cc4      	adds	r4, r0, #3
 8000d84:	f024 0403 	bic.w	r4, r4, #3
 8000d88:	42a0      	cmp	r0, r4
 8000d8a:	d007      	beq.n	8000d9c <sbrk_aligned+0x38>
 8000d8c:	1a21      	subs	r1, r4, r0
 8000d8e:	4628      	mov	r0, r5
 8000d90:	f000 fb96 	bl	80014c0 <_sbrk_r>
 8000d94:	3001      	adds	r0, #1
 8000d96:	d101      	bne.n	8000d9c <sbrk_aligned+0x38>
 8000d98:	f04f 34ff 	mov.w	r4, #4294967295
 8000d9c:	4620      	mov	r0, r4
 8000d9e:	bd70      	pop	{r4, r5, r6, pc}
 8000da0:	20000284 	.word	0x20000284

08000da4 <_malloc_r>:
 8000da4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000da8:	1ccd      	adds	r5, r1, #3
 8000daa:	f025 0503 	bic.w	r5, r5, #3
 8000dae:	3508      	adds	r5, #8
 8000db0:	2d0c      	cmp	r5, #12
 8000db2:	bf38      	it	cc
 8000db4:	250c      	movcc	r5, #12
 8000db6:	2d00      	cmp	r5, #0
 8000db8:	4607      	mov	r7, r0
 8000dba:	db01      	blt.n	8000dc0 <_malloc_r+0x1c>
 8000dbc:	42a9      	cmp	r1, r5
 8000dbe:	d905      	bls.n	8000dcc <_malloc_r+0x28>
 8000dc0:	230c      	movs	r3, #12
 8000dc2:	603b      	str	r3, [r7, #0]
 8000dc4:	2600      	movs	r6, #0
 8000dc6:	4630      	mov	r0, r6
 8000dc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000dcc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000ea0 <_malloc_r+0xfc>
 8000dd0:	f000 f868 	bl	8000ea4 <__malloc_lock>
 8000dd4:	f8d8 3000 	ldr.w	r3, [r8]
 8000dd8:	461c      	mov	r4, r3
 8000dda:	bb5c      	cbnz	r4, 8000e34 <_malloc_r+0x90>
 8000ddc:	4629      	mov	r1, r5
 8000dde:	4638      	mov	r0, r7
 8000de0:	f7ff ffc0 	bl	8000d64 <sbrk_aligned>
 8000de4:	1c43      	adds	r3, r0, #1
 8000de6:	4604      	mov	r4, r0
 8000de8:	d155      	bne.n	8000e96 <_malloc_r+0xf2>
 8000dea:	f8d8 4000 	ldr.w	r4, [r8]
 8000dee:	4626      	mov	r6, r4
 8000df0:	2e00      	cmp	r6, #0
 8000df2:	d145      	bne.n	8000e80 <_malloc_r+0xdc>
 8000df4:	2c00      	cmp	r4, #0
 8000df6:	d048      	beq.n	8000e8a <_malloc_r+0xe6>
 8000df8:	6823      	ldr	r3, [r4, #0]
 8000dfa:	4631      	mov	r1, r6
 8000dfc:	4638      	mov	r0, r7
 8000dfe:	eb04 0903 	add.w	r9, r4, r3
 8000e02:	f000 fb5d 	bl	80014c0 <_sbrk_r>
 8000e06:	4581      	cmp	r9, r0
 8000e08:	d13f      	bne.n	8000e8a <_malloc_r+0xe6>
 8000e0a:	6821      	ldr	r1, [r4, #0]
 8000e0c:	1a6d      	subs	r5, r5, r1
 8000e0e:	4629      	mov	r1, r5
 8000e10:	4638      	mov	r0, r7
 8000e12:	f7ff ffa7 	bl	8000d64 <sbrk_aligned>
 8000e16:	3001      	adds	r0, #1
 8000e18:	d037      	beq.n	8000e8a <_malloc_r+0xe6>
 8000e1a:	6823      	ldr	r3, [r4, #0]
 8000e1c:	442b      	add	r3, r5
 8000e1e:	6023      	str	r3, [r4, #0]
 8000e20:	f8d8 3000 	ldr.w	r3, [r8]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d038      	beq.n	8000e9a <_malloc_r+0xf6>
 8000e28:	685a      	ldr	r2, [r3, #4]
 8000e2a:	42a2      	cmp	r2, r4
 8000e2c:	d12b      	bne.n	8000e86 <_malloc_r+0xe2>
 8000e2e:	2200      	movs	r2, #0
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	e00f      	b.n	8000e54 <_malloc_r+0xb0>
 8000e34:	6822      	ldr	r2, [r4, #0]
 8000e36:	1b52      	subs	r2, r2, r5
 8000e38:	d41f      	bmi.n	8000e7a <_malloc_r+0xd6>
 8000e3a:	2a0b      	cmp	r2, #11
 8000e3c:	d917      	bls.n	8000e6e <_malloc_r+0xca>
 8000e3e:	1961      	adds	r1, r4, r5
 8000e40:	42a3      	cmp	r3, r4
 8000e42:	6025      	str	r5, [r4, #0]
 8000e44:	bf18      	it	ne
 8000e46:	6059      	strne	r1, [r3, #4]
 8000e48:	6863      	ldr	r3, [r4, #4]
 8000e4a:	bf08      	it	eq
 8000e4c:	f8c8 1000 	streq.w	r1, [r8]
 8000e50:	5162      	str	r2, [r4, r5]
 8000e52:	604b      	str	r3, [r1, #4]
 8000e54:	4638      	mov	r0, r7
 8000e56:	f104 060b 	add.w	r6, r4, #11
 8000e5a:	f000 f829 	bl	8000eb0 <__malloc_unlock>
 8000e5e:	f026 0607 	bic.w	r6, r6, #7
 8000e62:	1d23      	adds	r3, r4, #4
 8000e64:	1af2      	subs	r2, r6, r3
 8000e66:	d0ae      	beq.n	8000dc6 <_malloc_r+0x22>
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	50a3      	str	r3, [r4, r2]
 8000e6c:	e7ab      	b.n	8000dc6 <_malloc_r+0x22>
 8000e6e:	42a3      	cmp	r3, r4
 8000e70:	6862      	ldr	r2, [r4, #4]
 8000e72:	d1dd      	bne.n	8000e30 <_malloc_r+0x8c>
 8000e74:	f8c8 2000 	str.w	r2, [r8]
 8000e78:	e7ec      	b.n	8000e54 <_malloc_r+0xb0>
 8000e7a:	4623      	mov	r3, r4
 8000e7c:	6864      	ldr	r4, [r4, #4]
 8000e7e:	e7ac      	b.n	8000dda <_malloc_r+0x36>
 8000e80:	4634      	mov	r4, r6
 8000e82:	6876      	ldr	r6, [r6, #4]
 8000e84:	e7b4      	b.n	8000df0 <_malloc_r+0x4c>
 8000e86:	4613      	mov	r3, r2
 8000e88:	e7cc      	b.n	8000e24 <_malloc_r+0x80>
 8000e8a:	230c      	movs	r3, #12
 8000e8c:	603b      	str	r3, [r7, #0]
 8000e8e:	4638      	mov	r0, r7
 8000e90:	f000 f80e 	bl	8000eb0 <__malloc_unlock>
 8000e94:	e797      	b.n	8000dc6 <_malloc_r+0x22>
 8000e96:	6025      	str	r5, [r4, #0]
 8000e98:	e7dc      	b.n	8000e54 <_malloc_r+0xb0>
 8000e9a:	605b      	str	r3, [r3, #4]
 8000e9c:	deff      	udf	#255	; 0xff
 8000e9e:	bf00      	nop
 8000ea0:	20000280 	.word	0x20000280

08000ea4 <__malloc_lock>:
 8000ea4:	4801      	ldr	r0, [pc, #4]	; (8000eac <__malloc_lock+0x8>)
 8000ea6:	f7ff bf0f 	b.w	8000cc8 <__retarget_lock_acquire_recursive>
 8000eaa:	bf00      	nop
 8000eac:	2000027c 	.word	0x2000027c

08000eb0 <__malloc_unlock>:
 8000eb0:	4801      	ldr	r0, [pc, #4]	; (8000eb8 <__malloc_unlock+0x8>)
 8000eb2:	f7ff bf0a 	b.w	8000cca <__retarget_lock_release_recursive>
 8000eb6:	bf00      	nop
 8000eb8:	2000027c 	.word	0x2000027c

08000ebc <__ssputs_r>:
 8000ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ec0:	688e      	ldr	r6, [r1, #8]
 8000ec2:	461f      	mov	r7, r3
 8000ec4:	42be      	cmp	r6, r7
 8000ec6:	680b      	ldr	r3, [r1, #0]
 8000ec8:	4682      	mov	sl, r0
 8000eca:	460c      	mov	r4, r1
 8000ecc:	4690      	mov	r8, r2
 8000ece:	d82c      	bhi.n	8000f2a <__ssputs_r+0x6e>
 8000ed0:	898a      	ldrh	r2, [r1, #12]
 8000ed2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000ed6:	d026      	beq.n	8000f26 <__ssputs_r+0x6a>
 8000ed8:	6965      	ldr	r5, [r4, #20]
 8000eda:	6909      	ldr	r1, [r1, #16]
 8000edc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000ee0:	eba3 0901 	sub.w	r9, r3, r1
 8000ee4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000ee8:	1c7b      	adds	r3, r7, #1
 8000eea:	444b      	add	r3, r9
 8000eec:	106d      	asrs	r5, r5, #1
 8000eee:	429d      	cmp	r5, r3
 8000ef0:	bf38      	it	cc
 8000ef2:	461d      	movcc	r5, r3
 8000ef4:	0553      	lsls	r3, r2, #21
 8000ef6:	d527      	bpl.n	8000f48 <__ssputs_r+0x8c>
 8000ef8:	4629      	mov	r1, r5
 8000efa:	f7ff ff53 	bl	8000da4 <_malloc_r>
 8000efe:	4606      	mov	r6, r0
 8000f00:	b360      	cbz	r0, 8000f5c <__ssputs_r+0xa0>
 8000f02:	6921      	ldr	r1, [r4, #16]
 8000f04:	464a      	mov	r2, r9
 8000f06:	f000 faeb 	bl	80014e0 <memcpy>
 8000f0a:	89a3      	ldrh	r3, [r4, #12]
 8000f0c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f14:	81a3      	strh	r3, [r4, #12]
 8000f16:	6126      	str	r6, [r4, #16]
 8000f18:	6165      	str	r5, [r4, #20]
 8000f1a:	444e      	add	r6, r9
 8000f1c:	eba5 0509 	sub.w	r5, r5, r9
 8000f20:	6026      	str	r6, [r4, #0]
 8000f22:	60a5      	str	r5, [r4, #8]
 8000f24:	463e      	mov	r6, r7
 8000f26:	42be      	cmp	r6, r7
 8000f28:	d900      	bls.n	8000f2c <__ssputs_r+0x70>
 8000f2a:	463e      	mov	r6, r7
 8000f2c:	6820      	ldr	r0, [r4, #0]
 8000f2e:	4632      	mov	r2, r6
 8000f30:	4641      	mov	r1, r8
 8000f32:	f000 faab 	bl	800148c <memmove>
 8000f36:	68a3      	ldr	r3, [r4, #8]
 8000f38:	1b9b      	subs	r3, r3, r6
 8000f3a:	60a3      	str	r3, [r4, #8]
 8000f3c:	6823      	ldr	r3, [r4, #0]
 8000f3e:	4433      	add	r3, r6
 8000f40:	6023      	str	r3, [r4, #0]
 8000f42:	2000      	movs	r0, #0
 8000f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f48:	462a      	mov	r2, r5
 8000f4a:	f000 fad7 	bl	80014fc <_realloc_r>
 8000f4e:	4606      	mov	r6, r0
 8000f50:	2800      	cmp	r0, #0
 8000f52:	d1e0      	bne.n	8000f16 <__ssputs_r+0x5a>
 8000f54:	6921      	ldr	r1, [r4, #16]
 8000f56:	4650      	mov	r0, sl
 8000f58:	f7ff feb8 	bl	8000ccc <_free_r>
 8000f5c:	230c      	movs	r3, #12
 8000f5e:	f8ca 3000 	str.w	r3, [sl]
 8000f62:	89a3      	ldrh	r3, [r4, #12]
 8000f64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f68:	81a3      	strh	r3, [r4, #12]
 8000f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f6e:	e7e9      	b.n	8000f44 <__ssputs_r+0x88>

08000f70 <_svfiprintf_r>:
 8000f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f74:	4698      	mov	r8, r3
 8000f76:	898b      	ldrh	r3, [r1, #12]
 8000f78:	061b      	lsls	r3, r3, #24
 8000f7a:	b09d      	sub	sp, #116	; 0x74
 8000f7c:	4607      	mov	r7, r0
 8000f7e:	460d      	mov	r5, r1
 8000f80:	4614      	mov	r4, r2
 8000f82:	d50e      	bpl.n	8000fa2 <_svfiprintf_r+0x32>
 8000f84:	690b      	ldr	r3, [r1, #16]
 8000f86:	b963      	cbnz	r3, 8000fa2 <_svfiprintf_r+0x32>
 8000f88:	2140      	movs	r1, #64	; 0x40
 8000f8a:	f7ff ff0b 	bl	8000da4 <_malloc_r>
 8000f8e:	6028      	str	r0, [r5, #0]
 8000f90:	6128      	str	r0, [r5, #16]
 8000f92:	b920      	cbnz	r0, 8000f9e <_svfiprintf_r+0x2e>
 8000f94:	230c      	movs	r3, #12
 8000f96:	603b      	str	r3, [r7, #0]
 8000f98:	f04f 30ff 	mov.w	r0, #4294967295
 8000f9c:	e0d0      	b.n	8001140 <_svfiprintf_r+0x1d0>
 8000f9e:	2340      	movs	r3, #64	; 0x40
 8000fa0:	616b      	str	r3, [r5, #20]
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	9309      	str	r3, [sp, #36]	; 0x24
 8000fa6:	2320      	movs	r3, #32
 8000fa8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000fac:	f8cd 800c 	str.w	r8, [sp, #12]
 8000fb0:	2330      	movs	r3, #48	; 0x30
 8000fb2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8001158 <_svfiprintf_r+0x1e8>
 8000fb6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000fba:	f04f 0901 	mov.w	r9, #1
 8000fbe:	4623      	mov	r3, r4
 8000fc0:	469a      	mov	sl, r3
 8000fc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000fc6:	b10a      	cbz	r2, 8000fcc <_svfiprintf_r+0x5c>
 8000fc8:	2a25      	cmp	r2, #37	; 0x25
 8000fca:	d1f9      	bne.n	8000fc0 <_svfiprintf_r+0x50>
 8000fcc:	ebba 0b04 	subs.w	fp, sl, r4
 8000fd0:	d00b      	beq.n	8000fea <_svfiprintf_r+0x7a>
 8000fd2:	465b      	mov	r3, fp
 8000fd4:	4622      	mov	r2, r4
 8000fd6:	4629      	mov	r1, r5
 8000fd8:	4638      	mov	r0, r7
 8000fda:	f7ff ff6f 	bl	8000ebc <__ssputs_r>
 8000fde:	3001      	adds	r0, #1
 8000fe0:	f000 80a9 	beq.w	8001136 <_svfiprintf_r+0x1c6>
 8000fe4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000fe6:	445a      	add	r2, fp
 8000fe8:	9209      	str	r2, [sp, #36]	; 0x24
 8000fea:	f89a 3000 	ldrb.w	r3, [sl]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	f000 80a1 	beq.w	8001136 <_svfiprintf_r+0x1c6>
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	f04f 32ff 	mov.w	r2, #4294967295
 8000ffa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000ffe:	f10a 0a01 	add.w	sl, sl, #1
 8001002:	9304      	str	r3, [sp, #16]
 8001004:	9307      	str	r3, [sp, #28]
 8001006:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800100a:	931a      	str	r3, [sp, #104]	; 0x68
 800100c:	4654      	mov	r4, sl
 800100e:	2205      	movs	r2, #5
 8001010:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001014:	4850      	ldr	r0, [pc, #320]	; (8001158 <_svfiprintf_r+0x1e8>)
 8001016:	f7ff f8e3 	bl	80001e0 <memchr>
 800101a:	9a04      	ldr	r2, [sp, #16]
 800101c:	b9d8      	cbnz	r0, 8001056 <_svfiprintf_r+0xe6>
 800101e:	06d0      	lsls	r0, r2, #27
 8001020:	bf44      	itt	mi
 8001022:	2320      	movmi	r3, #32
 8001024:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001028:	0711      	lsls	r1, r2, #28
 800102a:	bf44      	itt	mi
 800102c:	232b      	movmi	r3, #43	; 0x2b
 800102e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001032:	f89a 3000 	ldrb.w	r3, [sl]
 8001036:	2b2a      	cmp	r3, #42	; 0x2a
 8001038:	d015      	beq.n	8001066 <_svfiprintf_r+0xf6>
 800103a:	9a07      	ldr	r2, [sp, #28]
 800103c:	4654      	mov	r4, sl
 800103e:	2000      	movs	r0, #0
 8001040:	f04f 0c0a 	mov.w	ip, #10
 8001044:	4621      	mov	r1, r4
 8001046:	f811 3b01 	ldrb.w	r3, [r1], #1
 800104a:	3b30      	subs	r3, #48	; 0x30
 800104c:	2b09      	cmp	r3, #9
 800104e:	d94d      	bls.n	80010ec <_svfiprintf_r+0x17c>
 8001050:	b1b0      	cbz	r0, 8001080 <_svfiprintf_r+0x110>
 8001052:	9207      	str	r2, [sp, #28]
 8001054:	e014      	b.n	8001080 <_svfiprintf_r+0x110>
 8001056:	eba0 0308 	sub.w	r3, r0, r8
 800105a:	fa09 f303 	lsl.w	r3, r9, r3
 800105e:	4313      	orrs	r3, r2
 8001060:	9304      	str	r3, [sp, #16]
 8001062:	46a2      	mov	sl, r4
 8001064:	e7d2      	b.n	800100c <_svfiprintf_r+0x9c>
 8001066:	9b03      	ldr	r3, [sp, #12]
 8001068:	1d19      	adds	r1, r3, #4
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	9103      	str	r1, [sp, #12]
 800106e:	2b00      	cmp	r3, #0
 8001070:	bfbb      	ittet	lt
 8001072:	425b      	neglt	r3, r3
 8001074:	f042 0202 	orrlt.w	r2, r2, #2
 8001078:	9307      	strge	r3, [sp, #28]
 800107a:	9307      	strlt	r3, [sp, #28]
 800107c:	bfb8      	it	lt
 800107e:	9204      	strlt	r2, [sp, #16]
 8001080:	7823      	ldrb	r3, [r4, #0]
 8001082:	2b2e      	cmp	r3, #46	; 0x2e
 8001084:	d10c      	bne.n	80010a0 <_svfiprintf_r+0x130>
 8001086:	7863      	ldrb	r3, [r4, #1]
 8001088:	2b2a      	cmp	r3, #42	; 0x2a
 800108a:	d134      	bne.n	80010f6 <_svfiprintf_r+0x186>
 800108c:	9b03      	ldr	r3, [sp, #12]
 800108e:	1d1a      	adds	r2, r3, #4
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	9203      	str	r2, [sp, #12]
 8001094:	2b00      	cmp	r3, #0
 8001096:	bfb8      	it	lt
 8001098:	f04f 33ff 	movlt.w	r3, #4294967295
 800109c:	3402      	adds	r4, #2
 800109e:	9305      	str	r3, [sp, #20]
 80010a0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8001168 <_svfiprintf_r+0x1f8>
 80010a4:	7821      	ldrb	r1, [r4, #0]
 80010a6:	2203      	movs	r2, #3
 80010a8:	4650      	mov	r0, sl
 80010aa:	f7ff f899 	bl	80001e0 <memchr>
 80010ae:	b138      	cbz	r0, 80010c0 <_svfiprintf_r+0x150>
 80010b0:	9b04      	ldr	r3, [sp, #16]
 80010b2:	eba0 000a 	sub.w	r0, r0, sl
 80010b6:	2240      	movs	r2, #64	; 0x40
 80010b8:	4082      	lsls	r2, r0
 80010ba:	4313      	orrs	r3, r2
 80010bc:	3401      	adds	r4, #1
 80010be:	9304      	str	r3, [sp, #16]
 80010c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80010c4:	4825      	ldr	r0, [pc, #148]	; (800115c <_svfiprintf_r+0x1ec>)
 80010c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80010ca:	2206      	movs	r2, #6
 80010cc:	f7ff f888 	bl	80001e0 <memchr>
 80010d0:	2800      	cmp	r0, #0
 80010d2:	d038      	beq.n	8001146 <_svfiprintf_r+0x1d6>
 80010d4:	4b22      	ldr	r3, [pc, #136]	; (8001160 <_svfiprintf_r+0x1f0>)
 80010d6:	bb1b      	cbnz	r3, 8001120 <_svfiprintf_r+0x1b0>
 80010d8:	9b03      	ldr	r3, [sp, #12]
 80010da:	3307      	adds	r3, #7
 80010dc:	f023 0307 	bic.w	r3, r3, #7
 80010e0:	3308      	adds	r3, #8
 80010e2:	9303      	str	r3, [sp, #12]
 80010e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80010e6:	4433      	add	r3, r6
 80010e8:	9309      	str	r3, [sp, #36]	; 0x24
 80010ea:	e768      	b.n	8000fbe <_svfiprintf_r+0x4e>
 80010ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80010f0:	460c      	mov	r4, r1
 80010f2:	2001      	movs	r0, #1
 80010f4:	e7a6      	b.n	8001044 <_svfiprintf_r+0xd4>
 80010f6:	2300      	movs	r3, #0
 80010f8:	3401      	adds	r4, #1
 80010fa:	9305      	str	r3, [sp, #20]
 80010fc:	4619      	mov	r1, r3
 80010fe:	f04f 0c0a 	mov.w	ip, #10
 8001102:	4620      	mov	r0, r4
 8001104:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001108:	3a30      	subs	r2, #48	; 0x30
 800110a:	2a09      	cmp	r2, #9
 800110c:	d903      	bls.n	8001116 <_svfiprintf_r+0x1a6>
 800110e:	2b00      	cmp	r3, #0
 8001110:	d0c6      	beq.n	80010a0 <_svfiprintf_r+0x130>
 8001112:	9105      	str	r1, [sp, #20]
 8001114:	e7c4      	b.n	80010a0 <_svfiprintf_r+0x130>
 8001116:	fb0c 2101 	mla	r1, ip, r1, r2
 800111a:	4604      	mov	r4, r0
 800111c:	2301      	movs	r3, #1
 800111e:	e7f0      	b.n	8001102 <_svfiprintf_r+0x192>
 8001120:	ab03      	add	r3, sp, #12
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	462a      	mov	r2, r5
 8001126:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <_svfiprintf_r+0x1f4>)
 8001128:	a904      	add	r1, sp, #16
 800112a:	4638      	mov	r0, r7
 800112c:	f3af 8000 	nop.w
 8001130:	1c42      	adds	r2, r0, #1
 8001132:	4606      	mov	r6, r0
 8001134:	d1d6      	bne.n	80010e4 <_svfiprintf_r+0x174>
 8001136:	89ab      	ldrh	r3, [r5, #12]
 8001138:	065b      	lsls	r3, r3, #25
 800113a:	f53f af2d 	bmi.w	8000f98 <_svfiprintf_r+0x28>
 800113e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001140:	b01d      	add	sp, #116	; 0x74
 8001142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001146:	ab03      	add	r3, sp, #12
 8001148:	9300      	str	r3, [sp, #0]
 800114a:	462a      	mov	r2, r5
 800114c:	4b05      	ldr	r3, [pc, #20]	; (8001164 <_svfiprintf_r+0x1f4>)
 800114e:	a904      	add	r1, sp, #16
 8001150:	4638      	mov	r0, r7
 8001152:	f000 f879 	bl	8001248 <_printf_i>
 8001156:	e7eb      	b.n	8001130 <_svfiprintf_r+0x1c0>
 8001158:	08001882 	.word	0x08001882
 800115c:	0800188c 	.word	0x0800188c
 8001160:	00000000 	.word	0x00000000
 8001164:	08000ebd 	.word	0x08000ebd
 8001168:	08001888 	.word	0x08001888

0800116c <_printf_common>:
 800116c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001170:	4616      	mov	r6, r2
 8001172:	4699      	mov	r9, r3
 8001174:	688a      	ldr	r2, [r1, #8]
 8001176:	690b      	ldr	r3, [r1, #16]
 8001178:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800117c:	4293      	cmp	r3, r2
 800117e:	bfb8      	it	lt
 8001180:	4613      	movlt	r3, r2
 8001182:	6033      	str	r3, [r6, #0]
 8001184:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001188:	4607      	mov	r7, r0
 800118a:	460c      	mov	r4, r1
 800118c:	b10a      	cbz	r2, 8001192 <_printf_common+0x26>
 800118e:	3301      	adds	r3, #1
 8001190:	6033      	str	r3, [r6, #0]
 8001192:	6823      	ldr	r3, [r4, #0]
 8001194:	0699      	lsls	r1, r3, #26
 8001196:	bf42      	ittt	mi
 8001198:	6833      	ldrmi	r3, [r6, #0]
 800119a:	3302      	addmi	r3, #2
 800119c:	6033      	strmi	r3, [r6, #0]
 800119e:	6825      	ldr	r5, [r4, #0]
 80011a0:	f015 0506 	ands.w	r5, r5, #6
 80011a4:	d106      	bne.n	80011b4 <_printf_common+0x48>
 80011a6:	f104 0a19 	add.w	sl, r4, #25
 80011aa:	68e3      	ldr	r3, [r4, #12]
 80011ac:	6832      	ldr	r2, [r6, #0]
 80011ae:	1a9b      	subs	r3, r3, r2
 80011b0:	42ab      	cmp	r3, r5
 80011b2:	dc26      	bgt.n	8001202 <_printf_common+0x96>
 80011b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80011b8:	1e13      	subs	r3, r2, #0
 80011ba:	6822      	ldr	r2, [r4, #0]
 80011bc:	bf18      	it	ne
 80011be:	2301      	movne	r3, #1
 80011c0:	0692      	lsls	r2, r2, #26
 80011c2:	d42b      	bmi.n	800121c <_printf_common+0xb0>
 80011c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80011c8:	4649      	mov	r1, r9
 80011ca:	4638      	mov	r0, r7
 80011cc:	47c0      	blx	r8
 80011ce:	3001      	adds	r0, #1
 80011d0:	d01e      	beq.n	8001210 <_printf_common+0xa4>
 80011d2:	6823      	ldr	r3, [r4, #0]
 80011d4:	6922      	ldr	r2, [r4, #16]
 80011d6:	f003 0306 	and.w	r3, r3, #6
 80011da:	2b04      	cmp	r3, #4
 80011dc:	bf02      	ittt	eq
 80011de:	68e5      	ldreq	r5, [r4, #12]
 80011e0:	6833      	ldreq	r3, [r6, #0]
 80011e2:	1aed      	subeq	r5, r5, r3
 80011e4:	68a3      	ldr	r3, [r4, #8]
 80011e6:	bf0c      	ite	eq
 80011e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80011ec:	2500      	movne	r5, #0
 80011ee:	4293      	cmp	r3, r2
 80011f0:	bfc4      	itt	gt
 80011f2:	1a9b      	subgt	r3, r3, r2
 80011f4:	18ed      	addgt	r5, r5, r3
 80011f6:	2600      	movs	r6, #0
 80011f8:	341a      	adds	r4, #26
 80011fa:	42b5      	cmp	r5, r6
 80011fc:	d11a      	bne.n	8001234 <_printf_common+0xc8>
 80011fe:	2000      	movs	r0, #0
 8001200:	e008      	b.n	8001214 <_printf_common+0xa8>
 8001202:	2301      	movs	r3, #1
 8001204:	4652      	mov	r2, sl
 8001206:	4649      	mov	r1, r9
 8001208:	4638      	mov	r0, r7
 800120a:	47c0      	blx	r8
 800120c:	3001      	adds	r0, #1
 800120e:	d103      	bne.n	8001218 <_printf_common+0xac>
 8001210:	f04f 30ff 	mov.w	r0, #4294967295
 8001214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001218:	3501      	adds	r5, #1
 800121a:	e7c6      	b.n	80011aa <_printf_common+0x3e>
 800121c:	18e1      	adds	r1, r4, r3
 800121e:	1c5a      	adds	r2, r3, #1
 8001220:	2030      	movs	r0, #48	; 0x30
 8001222:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001226:	4422      	add	r2, r4
 8001228:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800122c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001230:	3302      	adds	r3, #2
 8001232:	e7c7      	b.n	80011c4 <_printf_common+0x58>
 8001234:	2301      	movs	r3, #1
 8001236:	4622      	mov	r2, r4
 8001238:	4649      	mov	r1, r9
 800123a:	4638      	mov	r0, r7
 800123c:	47c0      	blx	r8
 800123e:	3001      	adds	r0, #1
 8001240:	d0e6      	beq.n	8001210 <_printf_common+0xa4>
 8001242:	3601      	adds	r6, #1
 8001244:	e7d9      	b.n	80011fa <_printf_common+0x8e>
	...

08001248 <_printf_i>:
 8001248:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800124c:	7e0f      	ldrb	r7, [r1, #24]
 800124e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001250:	2f78      	cmp	r7, #120	; 0x78
 8001252:	4691      	mov	r9, r2
 8001254:	4680      	mov	r8, r0
 8001256:	460c      	mov	r4, r1
 8001258:	469a      	mov	sl, r3
 800125a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800125e:	d807      	bhi.n	8001270 <_printf_i+0x28>
 8001260:	2f62      	cmp	r7, #98	; 0x62
 8001262:	d80a      	bhi.n	800127a <_printf_i+0x32>
 8001264:	2f00      	cmp	r7, #0
 8001266:	f000 80d4 	beq.w	8001412 <_printf_i+0x1ca>
 800126a:	2f58      	cmp	r7, #88	; 0x58
 800126c:	f000 80c0 	beq.w	80013f0 <_printf_i+0x1a8>
 8001270:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001274:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001278:	e03a      	b.n	80012f0 <_printf_i+0xa8>
 800127a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800127e:	2b15      	cmp	r3, #21
 8001280:	d8f6      	bhi.n	8001270 <_printf_i+0x28>
 8001282:	a101      	add	r1, pc, #4	; (adr r1, 8001288 <_printf_i+0x40>)
 8001284:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001288:	080012e1 	.word	0x080012e1
 800128c:	080012f5 	.word	0x080012f5
 8001290:	08001271 	.word	0x08001271
 8001294:	08001271 	.word	0x08001271
 8001298:	08001271 	.word	0x08001271
 800129c:	08001271 	.word	0x08001271
 80012a0:	080012f5 	.word	0x080012f5
 80012a4:	08001271 	.word	0x08001271
 80012a8:	08001271 	.word	0x08001271
 80012ac:	08001271 	.word	0x08001271
 80012b0:	08001271 	.word	0x08001271
 80012b4:	080013f9 	.word	0x080013f9
 80012b8:	08001321 	.word	0x08001321
 80012bc:	080013b3 	.word	0x080013b3
 80012c0:	08001271 	.word	0x08001271
 80012c4:	08001271 	.word	0x08001271
 80012c8:	0800141b 	.word	0x0800141b
 80012cc:	08001271 	.word	0x08001271
 80012d0:	08001321 	.word	0x08001321
 80012d4:	08001271 	.word	0x08001271
 80012d8:	08001271 	.word	0x08001271
 80012dc:	080013bb 	.word	0x080013bb
 80012e0:	682b      	ldr	r3, [r5, #0]
 80012e2:	1d1a      	adds	r2, r3, #4
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	602a      	str	r2, [r5, #0]
 80012e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80012ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80012f0:	2301      	movs	r3, #1
 80012f2:	e09f      	b.n	8001434 <_printf_i+0x1ec>
 80012f4:	6820      	ldr	r0, [r4, #0]
 80012f6:	682b      	ldr	r3, [r5, #0]
 80012f8:	0607      	lsls	r7, r0, #24
 80012fa:	f103 0104 	add.w	r1, r3, #4
 80012fe:	6029      	str	r1, [r5, #0]
 8001300:	d501      	bpl.n	8001306 <_printf_i+0xbe>
 8001302:	681e      	ldr	r6, [r3, #0]
 8001304:	e003      	b.n	800130e <_printf_i+0xc6>
 8001306:	0646      	lsls	r6, r0, #25
 8001308:	d5fb      	bpl.n	8001302 <_printf_i+0xba>
 800130a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800130e:	2e00      	cmp	r6, #0
 8001310:	da03      	bge.n	800131a <_printf_i+0xd2>
 8001312:	232d      	movs	r3, #45	; 0x2d
 8001314:	4276      	negs	r6, r6
 8001316:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800131a:	485a      	ldr	r0, [pc, #360]	; (8001484 <_printf_i+0x23c>)
 800131c:	230a      	movs	r3, #10
 800131e:	e012      	b.n	8001346 <_printf_i+0xfe>
 8001320:	682b      	ldr	r3, [r5, #0]
 8001322:	6820      	ldr	r0, [r4, #0]
 8001324:	1d19      	adds	r1, r3, #4
 8001326:	6029      	str	r1, [r5, #0]
 8001328:	0605      	lsls	r5, r0, #24
 800132a:	d501      	bpl.n	8001330 <_printf_i+0xe8>
 800132c:	681e      	ldr	r6, [r3, #0]
 800132e:	e002      	b.n	8001336 <_printf_i+0xee>
 8001330:	0641      	lsls	r1, r0, #25
 8001332:	d5fb      	bpl.n	800132c <_printf_i+0xe4>
 8001334:	881e      	ldrh	r6, [r3, #0]
 8001336:	4853      	ldr	r0, [pc, #332]	; (8001484 <_printf_i+0x23c>)
 8001338:	2f6f      	cmp	r7, #111	; 0x6f
 800133a:	bf0c      	ite	eq
 800133c:	2308      	moveq	r3, #8
 800133e:	230a      	movne	r3, #10
 8001340:	2100      	movs	r1, #0
 8001342:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001346:	6865      	ldr	r5, [r4, #4]
 8001348:	60a5      	str	r5, [r4, #8]
 800134a:	2d00      	cmp	r5, #0
 800134c:	bfa2      	ittt	ge
 800134e:	6821      	ldrge	r1, [r4, #0]
 8001350:	f021 0104 	bicge.w	r1, r1, #4
 8001354:	6021      	strge	r1, [r4, #0]
 8001356:	b90e      	cbnz	r6, 800135c <_printf_i+0x114>
 8001358:	2d00      	cmp	r5, #0
 800135a:	d04b      	beq.n	80013f4 <_printf_i+0x1ac>
 800135c:	4615      	mov	r5, r2
 800135e:	fbb6 f1f3 	udiv	r1, r6, r3
 8001362:	fb03 6711 	mls	r7, r3, r1, r6
 8001366:	5dc7      	ldrb	r7, [r0, r7]
 8001368:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800136c:	4637      	mov	r7, r6
 800136e:	42bb      	cmp	r3, r7
 8001370:	460e      	mov	r6, r1
 8001372:	d9f4      	bls.n	800135e <_printf_i+0x116>
 8001374:	2b08      	cmp	r3, #8
 8001376:	d10b      	bne.n	8001390 <_printf_i+0x148>
 8001378:	6823      	ldr	r3, [r4, #0]
 800137a:	07de      	lsls	r6, r3, #31
 800137c:	d508      	bpl.n	8001390 <_printf_i+0x148>
 800137e:	6923      	ldr	r3, [r4, #16]
 8001380:	6861      	ldr	r1, [r4, #4]
 8001382:	4299      	cmp	r1, r3
 8001384:	bfde      	ittt	le
 8001386:	2330      	movle	r3, #48	; 0x30
 8001388:	f805 3c01 	strble.w	r3, [r5, #-1]
 800138c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001390:	1b52      	subs	r2, r2, r5
 8001392:	6122      	str	r2, [r4, #16]
 8001394:	f8cd a000 	str.w	sl, [sp]
 8001398:	464b      	mov	r3, r9
 800139a:	aa03      	add	r2, sp, #12
 800139c:	4621      	mov	r1, r4
 800139e:	4640      	mov	r0, r8
 80013a0:	f7ff fee4 	bl	800116c <_printf_common>
 80013a4:	3001      	adds	r0, #1
 80013a6:	d14a      	bne.n	800143e <_printf_i+0x1f6>
 80013a8:	f04f 30ff 	mov.w	r0, #4294967295
 80013ac:	b004      	add	sp, #16
 80013ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013b2:	6823      	ldr	r3, [r4, #0]
 80013b4:	f043 0320 	orr.w	r3, r3, #32
 80013b8:	6023      	str	r3, [r4, #0]
 80013ba:	4833      	ldr	r0, [pc, #204]	; (8001488 <_printf_i+0x240>)
 80013bc:	2778      	movs	r7, #120	; 0x78
 80013be:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80013c2:	6823      	ldr	r3, [r4, #0]
 80013c4:	6829      	ldr	r1, [r5, #0]
 80013c6:	061f      	lsls	r7, r3, #24
 80013c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80013cc:	d402      	bmi.n	80013d4 <_printf_i+0x18c>
 80013ce:	065f      	lsls	r7, r3, #25
 80013d0:	bf48      	it	mi
 80013d2:	b2b6      	uxthmi	r6, r6
 80013d4:	07df      	lsls	r7, r3, #31
 80013d6:	bf48      	it	mi
 80013d8:	f043 0320 	orrmi.w	r3, r3, #32
 80013dc:	6029      	str	r1, [r5, #0]
 80013de:	bf48      	it	mi
 80013e0:	6023      	strmi	r3, [r4, #0]
 80013e2:	b91e      	cbnz	r6, 80013ec <_printf_i+0x1a4>
 80013e4:	6823      	ldr	r3, [r4, #0]
 80013e6:	f023 0320 	bic.w	r3, r3, #32
 80013ea:	6023      	str	r3, [r4, #0]
 80013ec:	2310      	movs	r3, #16
 80013ee:	e7a7      	b.n	8001340 <_printf_i+0xf8>
 80013f0:	4824      	ldr	r0, [pc, #144]	; (8001484 <_printf_i+0x23c>)
 80013f2:	e7e4      	b.n	80013be <_printf_i+0x176>
 80013f4:	4615      	mov	r5, r2
 80013f6:	e7bd      	b.n	8001374 <_printf_i+0x12c>
 80013f8:	682b      	ldr	r3, [r5, #0]
 80013fa:	6826      	ldr	r6, [r4, #0]
 80013fc:	6961      	ldr	r1, [r4, #20]
 80013fe:	1d18      	adds	r0, r3, #4
 8001400:	6028      	str	r0, [r5, #0]
 8001402:	0635      	lsls	r5, r6, #24
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	d501      	bpl.n	800140c <_printf_i+0x1c4>
 8001408:	6019      	str	r1, [r3, #0]
 800140a:	e002      	b.n	8001412 <_printf_i+0x1ca>
 800140c:	0670      	lsls	r0, r6, #25
 800140e:	d5fb      	bpl.n	8001408 <_printf_i+0x1c0>
 8001410:	8019      	strh	r1, [r3, #0]
 8001412:	2300      	movs	r3, #0
 8001414:	6123      	str	r3, [r4, #16]
 8001416:	4615      	mov	r5, r2
 8001418:	e7bc      	b.n	8001394 <_printf_i+0x14c>
 800141a:	682b      	ldr	r3, [r5, #0]
 800141c:	1d1a      	adds	r2, r3, #4
 800141e:	602a      	str	r2, [r5, #0]
 8001420:	681d      	ldr	r5, [r3, #0]
 8001422:	6862      	ldr	r2, [r4, #4]
 8001424:	2100      	movs	r1, #0
 8001426:	4628      	mov	r0, r5
 8001428:	f7fe feda 	bl	80001e0 <memchr>
 800142c:	b108      	cbz	r0, 8001432 <_printf_i+0x1ea>
 800142e:	1b40      	subs	r0, r0, r5
 8001430:	6060      	str	r0, [r4, #4]
 8001432:	6863      	ldr	r3, [r4, #4]
 8001434:	6123      	str	r3, [r4, #16]
 8001436:	2300      	movs	r3, #0
 8001438:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800143c:	e7aa      	b.n	8001394 <_printf_i+0x14c>
 800143e:	6923      	ldr	r3, [r4, #16]
 8001440:	462a      	mov	r2, r5
 8001442:	4649      	mov	r1, r9
 8001444:	4640      	mov	r0, r8
 8001446:	47d0      	blx	sl
 8001448:	3001      	adds	r0, #1
 800144a:	d0ad      	beq.n	80013a8 <_printf_i+0x160>
 800144c:	6823      	ldr	r3, [r4, #0]
 800144e:	079b      	lsls	r3, r3, #30
 8001450:	d413      	bmi.n	800147a <_printf_i+0x232>
 8001452:	68e0      	ldr	r0, [r4, #12]
 8001454:	9b03      	ldr	r3, [sp, #12]
 8001456:	4298      	cmp	r0, r3
 8001458:	bfb8      	it	lt
 800145a:	4618      	movlt	r0, r3
 800145c:	e7a6      	b.n	80013ac <_printf_i+0x164>
 800145e:	2301      	movs	r3, #1
 8001460:	4632      	mov	r2, r6
 8001462:	4649      	mov	r1, r9
 8001464:	4640      	mov	r0, r8
 8001466:	47d0      	blx	sl
 8001468:	3001      	adds	r0, #1
 800146a:	d09d      	beq.n	80013a8 <_printf_i+0x160>
 800146c:	3501      	adds	r5, #1
 800146e:	68e3      	ldr	r3, [r4, #12]
 8001470:	9903      	ldr	r1, [sp, #12]
 8001472:	1a5b      	subs	r3, r3, r1
 8001474:	42ab      	cmp	r3, r5
 8001476:	dcf2      	bgt.n	800145e <_printf_i+0x216>
 8001478:	e7eb      	b.n	8001452 <_printf_i+0x20a>
 800147a:	2500      	movs	r5, #0
 800147c:	f104 0619 	add.w	r6, r4, #25
 8001480:	e7f5      	b.n	800146e <_printf_i+0x226>
 8001482:	bf00      	nop
 8001484:	08001893 	.word	0x08001893
 8001488:	080018a4 	.word	0x080018a4

0800148c <memmove>:
 800148c:	4288      	cmp	r0, r1
 800148e:	b510      	push	{r4, lr}
 8001490:	eb01 0402 	add.w	r4, r1, r2
 8001494:	d902      	bls.n	800149c <memmove+0x10>
 8001496:	4284      	cmp	r4, r0
 8001498:	4623      	mov	r3, r4
 800149a:	d807      	bhi.n	80014ac <memmove+0x20>
 800149c:	1e43      	subs	r3, r0, #1
 800149e:	42a1      	cmp	r1, r4
 80014a0:	d008      	beq.n	80014b4 <memmove+0x28>
 80014a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80014a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80014aa:	e7f8      	b.n	800149e <memmove+0x12>
 80014ac:	4402      	add	r2, r0
 80014ae:	4601      	mov	r1, r0
 80014b0:	428a      	cmp	r2, r1
 80014b2:	d100      	bne.n	80014b6 <memmove+0x2a>
 80014b4:	bd10      	pop	{r4, pc}
 80014b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80014ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80014be:	e7f7      	b.n	80014b0 <memmove+0x24>

080014c0 <_sbrk_r>:
 80014c0:	b538      	push	{r3, r4, r5, lr}
 80014c2:	4d06      	ldr	r5, [pc, #24]	; (80014dc <_sbrk_r+0x1c>)
 80014c4:	2300      	movs	r3, #0
 80014c6:	4604      	mov	r4, r0
 80014c8:	4608      	mov	r0, r1
 80014ca:	602b      	str	r3, [r5, #0]
 80014cc:	f7ff fa58 	bl	8000980 <_sbrk>
 80014d0:	1c43      	adds	r3, r0, #1
 80014d2:	d102      	bne.n	80014da <_sbrk_r+0x1a>
 80014d4:	682b      	ldr	r3, [r5, #0]
 80014d6:	b103      	cbz	r3, 80014da <_sbrk_r+0x1a>
 80014d8:	6023      	str	r3, [r4, #0]
 80014da:	bd38      	pop	{r3, r4, r5, pc}
 80014dc:	20000278 	.word	0x20000278

080014e0 <memcpy>:
 80014e0:	440a      	add	r2, r1
 80014e2:	4291      	cmp	r1, r2
 80014e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80014e8:	d100      	bne.n	80014ec <memcpy+0xc>
 80014ea:	4770      	bx	lr
 80014ec:	b510      	push	{r4, lr}
 80014ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80014f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80014f6:	4291      	cmp	r1, r2
 80014f8:	d1f9      	bne.n	80014ee <memcpy+0xe>
 80014fa:	bd10      	pop	{r4, pc}

080014fc <_realloc_r>:
 80014fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001500:	4680      	mov	r8, r0
 8001502:	4614      	mov	r4, r2
 8001504:	460e      	mov	r6, r1
 8001506:	b921      	cbnz	r1, 8001512 <_realloc_r+0x16>
 8001508:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800150c:	4611      	mov	r1, r2
 800150e:	f7ff bc49 	b.w	8000da4 <_malloc_r>
 8001512:	b92a      	cbnz	r2, 8001520 <_realloc_r+0x24>
 8001514:	f7ff fbda 	bl	8000ccc <_free_r>
 8001518:	4625      	mov	r5, r4
 800151a:	4628      	mov	r0, r5
 800151c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001520:	f000 f81b 	bl	800155a <_malloc_usable_size_r>
 8001524:	4284      	cmp	r4, r0
 8001526:	4607      	mov	r7, r0
 8001528:	d802      	bhi.n	8001530 <_realloc_r+0x34>
 800152a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800152e:	d812      	bhi.n	8001556 <_realloc_r+0x5a>
 8001530:	4621      	mov	r1, r4
 8001532:	4640      	mov	r0, r8
 8001534:	f7ff fc36 	bl	8000da4 <_malloc_r>
 8001538:	4605      	mov	r5, r0
 800153a:	2800      	cmp	r0, #0
 800153c:	d0ed      	beq.n	800151a <_realloc_r+0x1e>
 800153e:	42bc      	cmp	r4, r7
 8001540:	4622      	mov	r2, r4
 8001542:	4631      	mov	r1, r6
 8001544:	bf28      	it	cs
 8001546:	463a      	movcs	r2, r7
 8001548:	f7ff ffca 	bl	80014e0 <memcpy>
 800154c:	4631      	mov	r1, r6
 800154e:	4640      	mov	r0, r8
 8001550:	f7ff fbbc 	bl	8000ccc <_free_r>
 8001554:	e7e1      	b.n	800151a <_realloc_r+0x1e>
 8001556:	4635      	mov	r5, r6
 8001558:	e7df      	b.n	800151a <_realloc_r+0x1e>

0800155a <_malloc_usable_size_r>:
 800155a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800155e:	1f18      	subs	r0, r3, #4
 8001560:	2b00      	cmp	r3, #0
 8001562:	bfbc      	itt	lt
 8001564:	580b      	ldrlt	r3, [r1, r0]
 8001566:	18c0      	addlt	r0, r0, r3
 8001568:	4770      	bx	lr
	...

0800156c <_init>:
 800156c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800156e:	bf00      	nop
 8001570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001572:	bc08      	pop	{r3}
 8001574:	469e      	mov	lr, r3
 8001576:	4770      	bx	lr

08001578 <_fini>:
 8001578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800157a:	bf00      	nop
 800157c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800157e:	bc08      	pop	{r3}
 8001580:	469e      	mov	lr, r3
 8001582:	4770      	bx	lr
